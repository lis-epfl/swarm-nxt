{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This documentation describes how to build the OmniNXT drone, install the required software, and use the automation scripts to manage many drones. First, follow the IT Infrastructure Setup to get your IT environment setup. Then, for each drone, go through the steps in Drone Setup When you're ready to fly, follow the steps in Flying .","title":"Home"},{"location":"appendix/","text":"Appendix Flight Controller Alternate Telemetry Port If the TELEM2 port is broken, you can use the TELEM1 port instead. Hardware Changes Plug the cable that is connected to the serial port on the Orin to the port labelled TEL1 on the flight controller. It is the middle connector on the right side of the board on the picture below: Flight Controller Configuration Changes On the parameter screen of QGroundControl, change MAV_0_CONFIG to TELEM 1. Then, open the MAVLink console under \"Analyze Tools\", and run the following commands: param set SER_TEL1_BAUD 921600 cd fs/microsd mkdir etc/ cd etc echo \"mavlink stream -d /dev/ttyS1 -s HIGHRES_IMU -r 1000\" > extras.txt Note The HKUST GitHub suggests that the correct port is /dev/ttyS2 for TELEM1, but /dev/ttyS1 is tested and works. An issue has been filed If you run cat extras.txt , the mavlink stream line should be present.","title":"Appendix"},{"location":"appendix/#appendix","text":"","title":"Appendix"},{"location":"appendix/#flight-controller","text":"","title":"Flight Controller"},{"location":"appendix/#alternate-telemetry-port","text":"If the TELEM2 port is broken, you can use the TELEM1 port instead.","title":"Alternate Telemetry Port"},{"location":"appendix/#hardware-changes","text":"Plug the cable that is connected to the serial port on the Orin to the port labelled TEL1 on the flight controller. It is the middle connector on the right side of the board on the picture below:","title":"Hardware Changes"},{"location":"appendix/#flight-controller-configuration-changes","text":"On the parameter screen of QGroundControl, change MAV_0_CONFIG to TELEM 1. Then, open the MAVLink console under \"Analyze Tools\", and run the following commands: param set SER_TEL1_BAUD 921600 cd fs/microsd mkdir etc/ cd etc echo \"mavlink stream -d /dev/ttyS1 -s HIGHRES_IMU -r 1000\" > extras.txt Note The HKUST GitHub suggests that the correct port is /dev/ttyS2 for TELEM1, but /dev/ttyS1 is tested and works. An issue has been filed If you run cat extras.txt , the mavlink stream line should be present.","title":"Flight Controller Configuration Changes"},{"location":"drone-setup/","text":"Drone Setup Hardware Setup This section takes you through the hardware setup process for the OmniNXT Drone. The bill of materials can be found here . 3D print all of the necessary items that are labelled with the manufacturer \"Self\". Drone Naming: Establish a consistent naming scheme with the following requirements: starts with a letter (requirement for hostnames) ends with a non-negative integer less than 32 characters in length (requirement for hostnames) only ascii lowercase alphanumeric characters no other numbers in the name except for the last characters We use nxt# for our drones, where # is replaced with an integer Flight Controller and ESC Soldering Insert the antivibration rubber pieces into the four holes of both the ESC and the flight controller. On the ESC, the shorter side should be on the side with the eight pin connection port. On the flight controller, the shorter side of the rubber piece should be on the SD card side. Cut each of the motor wires to 55mm. Measure from the foot of the heatshrink. Cut a orin power cable from the base of the male side: 9.0cm on the red wire 8.5cm on the black wire Take the XT60 Cable (CAB-004) and cut it to the following lengths: Red: 8.5cm from the edge of the connector Black: 9.0cm from the edge of the connector Strip around 5mm from each wire of CAB-004 and add solder to each wire Strip around 5mm from each wire of the orin power cable and add solder to each wire Solder the red wires of CAB-004 and the orin power cable together on the positive pad of the ESC Solder the black wires of CAB-004 and the orin power cable together on the negative pad of the ESC. Visually inspect the solder joints to ensure no stray wires could cause a short between the pads. Use a digital multimeter in ohmmeter mode to measure the resistance between the + and - port of the ESC. The value should be >100k\u2126. Solder each of the motors to one triad of pins on the ESC. Use CAB-001 to connect the eight pin connectors on the flight controller and ESC. Do not use the eight pin cable that comes with the flight controller Warning Be very careful to avoid shorts between pads, especially on the big + and - pads for the power. Even a single wire strand connecting is dangerous! Visually inspect the solder connections after soldering to be confident, as well as perform a multimeter check betwen the +/- pads. Note Ensure that each motor's wires are connected to three consecutive pads on the ESC, with one of them in the corner. It does not matter which motor wire goes on which pin other than this. Fastening Assembly to Frame Stack the ESC and flight controller such that the big side of the rubber stoppers are touching. The MicroSD Card slot should be above the ESC power connection. Prepare the assembly: With the flight controller on the bottom, insert two M2X25 bolts on the side with the USB-C port. The head of the bolt should be on the same side as the flight controller Insert two M2x20 bolts on the opposite side of the USB-C port. Place the 6mm nylon spacers over all of the bolts. Orient the center of the frame over the assembly. The USB-C port should be facing towards the side if the frame with the cutout. The side with the divets for the nuts should be on the top. Loosely thread the M2 nuts onto each of the bolts For each of the bolts, hold the nut with your finger in the divet, and use a screwdriver to tighten the bolt. It should be snug, and equally tight across the four bolts. Do not overtighten, the ESC can contact the flight controller! Fasten the motors to the frame with the shorter bolts that were included in the packaging. Ensure that the cables are close to the frame, you can twist them together to ensure this. RC Receiver Unpack the receiver and extract the following items: NanoRX PCB Clear Heatshrink Open ended antenna Retrieve a 4 Pin JST Cable from the flight controller box Cut the JST cable to a length of 5.5cm, from the base of the connector. Solder the four pin cable. Looking from the side with the antenna U.Fl Port towards you, and at the bottom. In order from the left pad to the right pad: GND (Black Wire*) 5V (Red Wire*) FC RCIn (Green Wire*) FC TX (Yellow Wire*) Attach the antenna wire to the U.Fl Connector Cut 2cm of the clear heatshrink off and dispose of this length Put the rest of the clear heatshrink around the assembly and use a heatgun at 165\u2103 to protect the connections Connect the RC receiver to the appropriate port on the flight controller. Use zipties to fasten the radio module and data cable to the frame. Take care not to ziptie over the binding button the RC Module. Tape the antenna down to the frame as shown. Note *: The wire colours may not be reliable. Look at the silkscreen on the FC PCB to ensure the correct connection Todo Put SBUS link and make the RC page visible Orin Connection Remove the protective film over the screw holes for the NVME SSD and the WiFi Adapters Insert the NVME SSD to the corresponding port, and bolt it down with an M2x4 bolt. Attach the Wi-Fi antenna to the adapter. It does not matter which port goes into which antenna. YouTube Video Insert the Wi-Fi adapter to the corresponding port, and bolt it down using an M2x4 bolt. Insert the CR1025 coin cell battery in the slot on the carrier board. The positive side faces away from the board. Attach the carrier board and Orin to the other side of the frame as the flight controller. Use 5mm nylon spacers between the carrier board and the frame, and M3x12 bolts from the side with the board. Before putting the nut on, put some Loctite 243 Threadlocker on the bolt so the assembly does not become unattached with vibrations Remove the orange covers off of the bolt holes on the carrier board. Assemble the heatsink/fan onto the orin: Remove the fan from its protective casing, place it fan up to not smear the thermal paste Align the orin over the fan, using the bolt holes on the fan as a guide. If the edge connector is facing you, the holes on the fan to accomodate the inductors should be near you, and the fan wire should be on the left side. Bolt the frame down with the metal back. Use the provided bolts and screw them in with an X pattern using a T6 screwdriver bit Bolt the orin down to the carrier board with 2 M2x6 Nylon bolts. Attach the fan cable to the orin carrier board Remove the protective film from the double sided tape on the Wi-Fi antenna, and attach it to the front (other side of the orin) of the drone. Take care not to cover the hole at the front of the frame. It will be over the motor bolts. Connect CAB-002 to the orin. It should go in the connector closest to the power connector on the long side of the carrier board. Route it between the orin and the frame and connect the other end to the flight controller port underneath the MicroSD card. Frame Preparation Bolt (M3x8 Nylon) the five oddity RC standoffs at the marked locations in the image below. They should be protruding on the side with the flight controller. Put an M2x4 metal bolt in the marked slot below, protruding towards the orin. Use an M2 bolt to secure it. Bolt four M3 40mm standoffs with M3x10 nylon bolts. These should be on the Orin side. Bolt the prop guard onto the Oddity RC standoffs with M3x12 metal bolts. Use a labelmaker to print the drone name on a label. Place it somewhere on the drone that is visible, such as one of the camera frame mounting posts (the aluminum M3 40mm standoffs) Attention Do not install the propellers yet! They will be installed during the software setup section. Optitrack Markers If the optitrack system is used for odometry, five markers (MSC-008) must be placed on the drone. Identify the locations that you will place the five markers. The pattern they are in must be: assymmetric sufficiently unique compared to the other drones For each marker, use hot glue to adhere it to the drone body. Camera Assembly Cameras For each of the cameras, perform the following tasks: Cable Preparation Insert the camera cable into the camera. The side with the pads labelled FSIN and STROBE should be on the side of the camera. Use a flathead screwdriver to pull out the retaining clip from the connector. Insert the cable with the exposed contacts facing the PCB, push until it hits the back of the connector Secure the cable by pushing the retaining clip back in Cut the microwire to a length of 30mm. Scratch around 4mm of coating off of both ends. The colour should change, and you can check with a magnifying glass or microscope. Apply some solder to both sides of the microwire Solder one side of the microwire to the port labelled F on the camera board. The wire should come out on the opposite side of the camera. Solder the other side to the pad lablled FSIN on the cable. Check the connection using the continuity mode between the FSIN and F pads. Use the Kapton tape to secure the microwire, ensuring that the tape is providing strain relief for the solder connection Lens Switch Unscrew the lens that the camera ships with, and discard. Unbolt the existing lens mount. Bolt the lens mount that came with the fisheye lens. Screw in the fisheye lens into the mount. Test and Focus Note This step can be done anytime. However, it is suggested to test the camera setup now before things are bolted in more permanently. Insert all of the camera cables into the OAK camera board. Plug in the OAK camera board via USB-C to a laptop computer with ROS installed Download and install the driver package: GitHub Repository Check for focus on each of the cameras, and change the focus by turning the lenses on their holders. Camera Mounts Warning Be careful not to tug on the cables too much. They can tear. Use a soldering iron at 215\u2103 to insert the M2 threaded inserts into the six holes of each camera mount Bolt each camera to a mount by using four M2x8 bolts. The cables should be exiting towards the flange on the mount. Bolt the camera mounts to the camera holder frame. OAK Board Connect the four camera cables to the OAK board. Ensure that the orientation of the board is as it would be in the final assembly, and do not allow any camera cable to be twisted. Put the two halves of the cover around the OAK board, and bolt the assembly to the frame with 4 M2x14 bolts. Put the camera frame on the metal standoffs above the orin, and bolt down with four M3x6 bolts. Flight Controller Setup Flashing Firmware Important Ensure you have fully run the host computer setup in the IT Infrastructure Setup Guide Bootloader Ensure the flight controller is powered off, unplug any power from the drone. While pressing the BOOT button beside the MicroSD card, connect the USB-C cable to the PC and release the boot button. Open the STM32CubeProgrammer by navigating to where it was installed in a terminal ( /usr/local/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin by default), and running sudo ./STM32CubeProgrammer On the blue dropdown next to the green connect button, select USB. Click the refresh button until a port is automatically selected under port. If it doesn't show up, ensure the board is in DFU mode by unplugging the USB-C cable, and holding the BOOT button while plugging it in again. Click Connect. Open the menu on the left side and select \"Erasing & Programming\" Under file path, click browse and find the bootloader bin file. It was built in the automatable dependencies playbook. It will be in {host_fc_path}/PX4-Autopilot/build/hkust_nxt-dual_bootloader/hkust_nxt-dual_bootloader.bin where {host_fc_path} is specified in the ansible/group_vars/all . Check Verify programming, and Run after programming. Ensure the start address is 0x08000000 . Click on Start Programming. Main Program Navigate to {host_fc_path} in a terminal Open QGroundControl: ./QGroundControl.AppImage . Click on the Q symbol on the top left, and click on vehicle setup. Click on the firmware tab, and unplug and replug the USB cable to the flight controller. A pop-up should come up named \"Firmware Setup\". Select PX4 Pro, and check advanced settings. Select \"Custom firmware file...\" and click Ok In the file picker, navigate to {host_fc_path}/PX4-Autopilot/build/hkust_nxt-dual_default and select the hkust_nxt-dual_default.px4 file. You should see tabs such as \"Airframe\" and \"Sensors\" once the flash is complete. Apply Parameter File Info If you do not have a parameter file or want to create a new one, you can follow the steps in the Manual Setup > NXT Flight Controller Setup document instead of applying the parameter file as described below. First, ensure that the units in QGroundControl are set to SI Units: Click on the Q on the top left Click on application settings In the general tab under units, ensure that they are Meters, Meters, SquareMeters, Meters/second, Celsius. Then, apply the saved parameter file (which you can find in the swarm-nxt cloned repo: swarm-nxt/docs/params/nxt_params.params ) by following the steps below: Click on the Q button on the top left, click on Vehicle Setup, and parameters. Click the tools button and select \"Load from file\". Select the parameter file that can be found on github. Click okay to confirm NXT Configuration and Calibration MAV System ID The MAV System ID needs to be setup for every drone individually. This ID is a positive number that is associated with the drone. Follow a consistent naming scheme as described at the top of this document. Use the number that this drone ends with as your system ID. To set it: Search for MAV_SYS_ID in the parameters tab of QGroundControl's Vehicle Setup page. Set it to the unique number of your drone. Important If this number is the same for two drones, things will not work and it will be very hard to debug. Telemetry Streaming The flight controller needs to be configured to output data on a serial port so that the NVIDIA Orin can read and write commands. Here, when you load the params file, telemetry is set up on the TELEM2 port. Note You can optionally chose to use another port to do this telemetry streaming. See Appendix > Flight Controller > Alternate Telemetry Port for further instructions Go to the home screen of QGroundControl, and click on the Q button in the top left again. Click on analyze tools, and MAVLink Console. In the console, run the following commands: cd fs/microsd mkdir etc/ cd etc echo \"mavlink stream -d /dev/ttyS3 -s HIGHRES_IMU -r 1000\" > extras.txt If you run cat extras.txt , the mavlink stream line should be present. Propeller Numbering and Spin Direction First make sure the power is connected to the ESC and the ESC is connected to the FC. No need to power the Orin at this point, so you can unplug the power cable from the orin before powering the ESC. Ensure that the photo under \"Actuator Testing\" looks correct: Under PWM MAIN, select DShot600 for MAIN 1-4. Click on \"Identify & Assign Motors\" and follow the process. For collision safety, ensure that the Onix is located closer to the rear rotors (rotors 2 and 4 in the image). Important The top of the quadroter is the side with the Orin. Important Ensure the propellers are unmounted before the next step Set the spin direction for each motor so that it matches the image. Enable the slider, slide it up a bit and ensure the rotation direction is correct. Important Manually verify the spin direction individually for each motor, since the spin direction may not match QGroundControl Propeller Installation Observe the rotation direction in the propeller setup image. The Orin is on the back (near propeller #2 and #4). Using the long bolts that came with the propellers, bolt the propellers in. Verify that the propellers on the diagonals are the same type. Make sure that the blade orientation is in such a manner that as it turns in the rotor direction, it pushes the air down instead of up i.e. the air slides off of it downwards. Remote Control Ensure the Taranis has been setup following the Remote Control Setup Instructions . Go to the radio tab and follow the calibration procedure. Go to the flight modes page and set the channels like the image: Sensors On the sensors tab: Click on the orientations sub-tab, and set the autopilot orientation to ROTATION_ROLL_180_YAW_90 . Reboot if prompted. Important This is true if the arrow on the flight controller is pointed to the right if looked at from the bottom (orin on the back) Calibrate the gyroscope by putting the drone on a level surface, and then clicking the gyroscope button and following the wizard. Calibrate the accelometer by clicking on the accelerometer sub-tab and completing the procedure as prompted. Software Setup 1. Plug the external power into the XT60 cable for the battery. 1. Connect the host computer to the USB C port called \"Recovery Port\" on the carrier board. 2. Provide the carrier board with an internet connection via an Ethernet dongle on one of the three host USB-C ports on the long side of the carrier board 4. Press the button labelled \"RES\" on the Devboard 5. While pressing the RES button, press the REC button 6. Release the RES button while still pressing the REC button 7. Release the REC button after the power is connected 8. On the host computer, run lsusb . This sequence was a success if an entry with NVIDIA Corp. APX is visible ( ID 0955:7323 NVIDIA Corp. APX ) 9. Run the sdkmanager: sdkmanager --cli 10. Login, and then select the following options: install -> jetson -> target hardware 11. Select Jetson Orin NX, it should already be pre-selected 12. Reply Y to showing all Jetson versions. Select JetPack 6.2 13. Select both additional SDKs 14. Do not customize install settings 15. Reply N to flashing the Jetson Orin NX Module 16. Accept the license, then press enter twice for the installation to start. 17. Enter your password for administrative tasks. 18. It will install host components (on the PC) and target components. It will ask you whether to install or skip the installation on the Orin, choose skip. 19. Press enter to Exit. Flashing Process After the host components of the SDK are installed, run the following steps: Open the ~/nvidia/nvidia_sdk/JetPack_6.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra folder. Open a terminal in this folder. Download the post-install image from the Google Drive . Run the following command: tar -xvf /path/to/post-install_image.tar.gz -C ~/nvidia/nvidia_sdk/JetPack_6.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra/tools/backup_restore . This will take a while. Once this is done, make sure that the Orin is still in recovery mode (step 8 of Software Setup ), and run this command to flash the Jetson: sudo ./tools/backup_restore/l4t_backup_restore.sh -e nvme0n1 -r jetson-orin-nano-devkit-nvme . This will also take a while. Press the button labelled RES on the Jetson once the command has completed. Important Ensure you are in the Linux_for_Tegra folder Post-Flash Setup On the host computer, you should be able to SSH into the Orin now: ssh lis@192.168.55.1 . This connection is provided through the USB Recovery port. These are the default credentials: username: lis password: orin Password-Free Access For password free access to the Orin, follow these steps: Ensure that you have an SSH key in ~/.ssh If not, run ssh-keygen -t ed25519 -C <yourCommentHere> With the USB connected, run ssh-copy-id lis@192.168.55.1 Make sure that the ssh-agent is on: eval `ssh-agent` Add your key to the agent: ssh-add Ensure that you can access the device without a password: ssh lis@192.168.55.1 Ansible On the host computer, navigate to the ansible/ directory of the omni-nxt repo and run the playbook: ansible-playbook -i inventory.ini drone_setup.yml -K Enter the sudo password of the orin when prompted, as well as the hostname which should end with the same number that you set MAV_SYS_ID to in NXT Configuration and Calibration . Important It is very important that you set a unique hostname. You must follow the structured naming pattern described at the top of this document. The software depends on this assumption. Flight Preparation PID Tuning Follow all the steps in the Pre-Flight Checklist Launch the vehicle in position mode, and fly it slowly. Make sure that it feels decently well to operate. Hover the drone at 1.5 m, and ensure that it the drone is in the center of a 2x2x2m cube of free space. In QGroundControl, click on the Q on the top left and open the vehicle setup menu Click on PID Tuning Enable autotune Autotune the rate controller. Land, and save the parameters Takeoff again in a safety volume of 2x2x2m. Autotune the attitude controller. Land. If the autotune fails, you can increase the MC_AT_SYSID_AMP parameter by steps of 0.5, and trigger the autotune again. Optitrack Setup Bring the drone into view of the OptiTrack sensors Place the drone in view of the OptiTrack cameras, and ensure that the drone is facing the positive x direction of the coordinate system. Select the drone's markers on the screen, right click, and click on create rigid body. Give each drone the same name as the hostname. This allows the automated tooling to work properly. Warning It is very important that the drone is facing the positive x direction (orin towards the negative x direction).","title":"Drone Build Instructions"},{"location":"drone-setup/#drone-setup","text":"","title":"Drone Setup"},{"location":"drone-setup/#hardware-setup","text":"This section takes you through the hardware setup process for the OmniNXT Drone. The bill of materials can be found here . 3D print all of the necessary items that are labelled with the manufacturer \"Self\". Drone Naming: Establish a consistent naming scheme with the following requirements: starts with a letter (requirement for hostnames) ends with a non-negative integer less than 32 characters in length (requirement for hostnames) only ascii lowercase alphanumeric characters no other numbers in the name except for the last characters We use nxt# for our drones, where # is replaced with an integer","title":"Hardware Setup"},{"location":"drone-setup/#flight-controller-and-esc","text":"","title":"Flight Controller and ESC"},{"location":"drone-setup/#soldering","text":"Insert the antivibration rubber pieces into the four holes of both the ESC and the flight controller. On the ESC, the shorter side should be on the side with the eight pin connection port. On the flight controller, the shorter side of the rubber piece should be on the SD card side. Cut each of the motor wires to 55mm. Measure from the foot of the heatshrink. Cut a orin power cable from the base of the male side: 9.0cm on the red wire 8.5cm on the black wire Take the XT60 Cable (CAB-004) and cut it to the following lengths: Red: 8.5cm from the edge of the connector Black: 9.0cm from the edge of the connector Strip around 5mm from each wire of CAB-004 and add solder to each wire Strip around 5mm from each wire of the orin power cable and add solder to each wire Solder the red wires of CAB-004 and the orin power cable together on the positive pad of the ESC Solder the black wires of CAB-004 and the orin power cable together on the negative pad of the ESC. Visually inspect the solder joints to ensure no stray wires could cause a short between the pads. Use a digital multimeter in ohmmeter mode to measure the resistance between the + and - port of the ESC. The value should be >100k\u2126. Solder each of the motors to one triad of pins on the ESC. Use CAB-001 to connect the eight pin connectors on the flight controller and ESC. Do not use the eight pin cable that comes with the flight controller Warning Be very careful to avoid shorts between pads, especially on the big + and - pads for the power. Even a single wire strand connecting is dangerous! Visually inspect the solder connections after soldering to be confident, as well as perform a multimeter check betwen the +/- pads. Note Ensure that each motor's wires are connected to three consecutive pads on the ESC, with one of them in the corner. It does not matter which motor wire goes on which pin other than this.","title":"Soldering"},{"location":"drone-setup/#fastening-assembly-to-frame","text":"Stack the ESC and flight controller such that the big side of the rubber stoppers are touching. The MicroSD Card slot should be above the ESC power connection. Prepare the assembly: With the flight controller on the bottom, insert two M2X25 bolts on the side with the USB-C port. The head of the bolt should be on the same side as the flight controller Insert two M2x20 bolts on the opposite side of the USB-C port. Place the 6mm nylon spacers over all of the bolts. Orient the center of the frame over the assembly. The USB-C port should be facing towards the side if the frame with the cutout. The side with the divets for the nuts should be on the top. Loosely thread the M2 nuts onto each of the bolts For each of the bolts, hold the nut with your finger in the divet, and use a screwdriver to tighten the bolt. It should be snug, and equally tight across the four bolts. Do not overtighten, the ESC can contact the flight controller! Fasten the motors to the frame with the shorter bolts that were included in the packaging. Ensure that the cables are close to the frame, you can twist them together to ensure this.","title":"Fastening Assembly to Frame"},{"location":"drone-setup/#rc-receiver","text":"Unpack the receiver and extract the following items: NanoRX PCB Clear Heatshrink Open ended antenna Retrieve a 4 Pin JST Cable from the flight controller box Cut the JST cable to a length of 5.5cm, from the base of the connector. Solder the four pin cable. Looking from the side with the antenna U.Fl Port towards you, and at the bottom. In order from the left pad to the right pad: GND (Black Wire*) 5V (Red Wire*) FC RCIn (Green Wire*) FC TX (Yellow Wire*) Attach the antenna wire to the U.Fl Connector Cut 2cm of the clear heatshrink off and dispose of this length Put the rest of the clear heatshrink around the assembly and use a heatgun at 165\u2103 to protect the connections Connect the RC receiver to the appropriate port on the flight controller. Use zipties to fasten the radio module and data cable to the frame. Take care not to ziptie over the binding button the RC Module. Tape the antenna down to the frame as shown. Note *: The wire colours may not be reliable. Look at the silkscreen on the FC PCB to ensure the correct connection Todo Put SBUS link and make the RC page visible","title":"RC Receiver"},{"location":"drone-setup/#orin-connection","text":"Remove the protective film over the screw holes for the NVME SSD and the WiFi Adapters Insert the NVME SSD to the corresponding port, and bolt it down with an M2x4 bolt. Attach the Wi-Fi antenna to the adapter. It does not matter which port goes into which antenna. YouTube Video Insert the Wi-Fi adapter to the corresponding port, and bolt it down using an M2x4 bolt. Insert the CR1025 coin cell battery in the slot on the carrier board. The positive side faces away from the board. Attach the carrier board and Orin to the other side of the frame as the flight controller. Use 5mm nylon spacers between the carrier board and the frame, and M3x12 bolts from the side with the board. Before putting the nut on, put some Loctite 243 Threadlocker on the bolt so the assembly does not become unattached with vibrations Remove the orange covers off of the bolt holes on the carrier board. Assemble the heatsink/fan onto the orin: Remove the fan from its protective casing, place it fan up to not smear the thermal paste Align the orin over the fan, using the bolt holes on the fan as a guide. If the edge connector is facing you, the holes on the fan to accomodate the inductors should be near you, and the fan wire should be on the left side. Bolt the frame down with the metal back. Use the provided bolts and screw them in with an X pattern using a T6 screwdriver bit Bolt the orin down to the carrier board with 2 M2x6 Nylon bolts. Attach the fan cable to the orin carrier board Remove the protective film from the double sided tape on the Wi-Fi antenna, and attach it to the front (other side of the orin) of the drone. Take care not to cover the hole at the front of the frame. It will be over the motor bolts. Connect CAB-002 to the orin. It should go in the connector closest to the power connector on the long side of the carrier board. Route it between the orin and the frame and connect the other end to the flight controller port underneath the MicroSD card.","title":"Orin Connection"},{"location":"drone-setup/#frame-preparation","text":"Bolt (M3x8 Nylon) the five oddity RC standoffs at the marked locations in the image below. They should be protruding on the side with the flight controller. Put an M2x4 metal bolt in the marked slot below, protruding towards the orin. Use an M2 bolt to secure it. Bolt four M3 40mm standoffs with M3x10 nylon bolts. These should be on the Orin side. Bolt the prop guard onto the Oddity RC standoffs with M3x12 metal bolts. Use a labelmaker to print the drone name on a label. Place it somewhere on the drone that is visible, such as one of the camera frame mounting posts (the aluminum M3 40mm standoffs) Attention Do not install the propellers yet! They will be installed during the software setup section.","title":"Frame Preparation"},{"location":"drone-setup/#optitrack-markers","text":"If the optitrack system is used for odometry, five markers (MSC-008) must be placed on the drone. Identify the locations that you will place the five markers. The pattern they are in must be: assymmetric sufficiently unique compared to the other drones For each marker, use hot glue to adhere it to the drone body.","title":"Optitrack Markers"},{"location":"drone-setup/#camera-assembly","text":"","title":"Camera Assembly"},{"location":"drone-setup/#cameras","text":"For each of the cameras, perform the following tasks:","title":"Cameras"},{"location":"drone-setup/#cable-preparation","text":"Insert the camera cable into the camera. The side with the pads labelled FSIN and STROBE should be on the side of the camera. Use a flathead screwdriver to pull out the retaining clip from the connector. Insert the cable with the exposed contacts facing the PCB, push until it hits the back of the connector Secure the cable by pushing the retaining clip back in Cut the microwire to a length of 30mm. Scratch around 4mm of coating off of both ends. The colour should change, and you can check with a magnifying glass or microscope. Apply some solder to both sides of the microwire Solder one side of the microwire to the port labelled F on the camera board. The wire should come out on the opposite side of the camera. Solder the other side to the pad lablled FSIN on the cable. Check the connection using the continuity mode between the FSIN and F pads. Use the Kapton tape to secure the microwire, ensuring that the tape is providing strain relief for the solder connection","title":"Cable Preparation"},{"location":"drone-setup/#lens-switch","text":"Unscrew the lens that the camera ships with, and discard. Unbolt the existing lens mount. Bolt the lens mount that came with the fisheye lens. Screw in the fisheye lens into the mount.","title":"Lens Switch"},{"location":"drone-setup/#test-and-focus","text":"Note This step can be done anytime. However, it is suggested to test the camera setup now before things are bolted in more permanently. Insert all of the camera cables into the OAK camera board. Plug in the OAK camera board via USB-C to a laptop computer with ROS installed Download and install the driver package: GitHub Repository Check for focus on each of the cameras, and change the focus by turning the lenses on their holders.","title":"Test and Focus"},{"location":"drone-setup/#camera-mounts","text":"Warning Be careful not to tug on the cables too much. They can tear. Use a soldering iron at 215\u2103 to insert the M2 threaded inserts into the six holes of each camera mount Bolt each camera to a mount by using four M2x8 bolts. The cables should be exiting towards the flange on the mount. Bolt the camera mounts to the camera holder frame.","title":"Camera Mounts"},{"location":"drone-setup/#oak-board","text":"Connect the four camera cables to the OAK board. Ensure that the orientation of the board is as it would be in the final assembly, and do not allow any camera cable to be twisted. Put the two halves of the cover around the OAK board, and bolt the assembly to the frame with 4 M2x14 bolts. Put the camera frame on the metal standoffs above the orin, and bolt down with four M3x6 bolts.","title":"OAK Board"},{"location":"drone-setup/#flight-controller-setup","text":"","title":"Flight Controller Setup"},{"location":"drone-setup/#flashing-firmware","text":"Important Ensure you have fully run the host computer setup in the IT Infrastructure Setup Guide","title":"Flashing Firmware"},{"location":"drone-setup/#bootloader","text":"Ensure the flight controller is powered off, unplug any power from the drone. While pressing the BOOT button beside the MicroSD card, connect the USB-C cable to the PC and release the boot button. Open the STM32CubeProgrammer by navigating to where it was installed in a terminal ( /usr/local/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin by default), and running sudo ./STM32CubeProgrammer On the blue dropdown next to the green connect button, select USB. Click the refresh button until a port is automatically selected under port. If it doesn't show up, ensure the board is in DFU mode by unplugging the USB-C cable, and holding the BOOT button while plugging it in again. Click Connect. Open the menu on the left side and select \"Erasing & Programming\" Under file path, click browse and find the bootloader bin file. It was built in the automatable dependencies playbook. It will be in {host_fc_path}/PX4-Autopilot/build/hkust_nxt-dual_bootloader/hkust_nxt-dual_bootloader.bin where {host_fc_path} is specified in the ansible/group_vars/all . Check Verify programming, and Run after programming. Ensure the start address is 0x08000000 . Click on Start Programming.","title":"Bootloader"},{"location":"drone-setup/#main-program","text":"Navigate to {host_fc_path} in a terminal Open QGroundControl: ./QGroundControl.AppImage . Click on the Q symbol on the top left, and click on vehicle setup. Click on the firmware tab, and unplug and replug the USB cable to the flight controller. A pop-up should come up named \"Firmware Setup\". Select PX4 Pro, and check advanced settings. Select \"Custom firmware file...\" and click Ok In the file picker, navigate to {host_fc_path}/PX4-Autopilot/build/hkust_nxt-dual_default and select the hkust_nxt-dual_default.px4 file. You should see tabs such as \"Airframe\" and \"Sensors\" once the flash is complete.","title":"Main Program"},{"location":"drone-setup/#apply-parameter-file","text":"Info If you do not have a parameter file or want to create a new one, you can follow the steps in the Manual Setup > NXT Flight Controller Setup document instead of applying the parameter file as described below. First, ensure that the units in QGroundControl are set to SI Units: Click on the Q on the top left Click on application settings In the general tab under units, ensure that they are Meters, Meters, SquareMeters, Meters/second, Celsius. Then, apply the saved parameter file (which you can find in the swarm-nxt cloned repo: swarm-nxt/docs/params/nxt_params.params ) by following the steps below: Click on the Q button on the top left, click on Vehicle Setup, and parameters. Click the tools button and select \"Load from file\". Select the parameter file that can be found on github. Click okay to confirm","title":"Apply Parameter File"},{"location":"drone-setup/#nxt-configuration-and-calibration","text":"","title":"NXT Configuration and Calibration"},{"location":"drone-setup/#mav-system-id","text":"The MAV System ID needs to be setup for every drone individually. This ID is a positive number that is associated with the drone. Follow a consistent naming scheme as described at the top of this document. Use the number that this drone ends with as your system ID. To set it: Search for MAV_SYS_ID in the parameters tab of QGroundControl's Vehicle Setup page. Set it to the unique number of your drone. Important If this number is the same for two drones, things will not work and it will be very hard to debug.","title":"MAV System ID"},{"location":"drone-setup/#telemetry-streaming","text":"The flight controller needs to be configured to output data on a serial port so that the NVIDIA Orin can read and write commands. Here, when you load the params file, telemetry is set up on the TELEM2 port. Note You can optionally chose to use another port to do this telemetry streaming. See Appendix > Flight Controller > Alternate Telemetry Port for further instructions Go to the home screen of QGroundControl, and click on the Q button in the top left again. Click on analyze tools, and MAVLink Console. In the console, run the following commands: cd fs/microsd mkdir etc/ cd etc echo \"mavlink stream -d /dev/ttyS3 -s HIGHRES_IMU -r 1000\" > extras.txt If you run cat extras.txt , the mavlink stream line should be present.","title":"Telemetry Streaming"},{"location":"drone-setup/#propeller-numbering-and-spin-direction","text":"First make sure the power is connected to the ESC and the ESC is connected to the FC. No need to power the Orin at this point, so you can unplug the power cable from the orin before powering the ESC. Ensure that the photo under \"Actuator Testing\" looks correct: Under PWM MAIN, select DShot600 for MAIN 1-4. Click on \"Identify & Assign Motors\" and follow the process. For collision safety, ensure that the Onix is located closer to the rear rotors (rotors 2 and 4 in the image). Important The top of the quadroter is the side with the Orin. Important Ensure the propellers are unmounted before the next step Set the spin direction for each motor so that it matches the image. Enable the slider, slide it up a bit and ensure the rotation direction is correct. Important Manually verify the spin direction individually for each motor, since the spin direction may not match QGroundControl","title":"Propeller Numbering and Spin Direction"},{"location":"drone-setup/#propeller-installation","text":"Observe the rotation direction in the propeller setup image. The Orin is on the back (near propeller #2 and #4). Using the long bolts that came with the propellers, bolt the propellers in. Verify that the propellers on the diagonals are the same type. Make sure that the blade orientation is in such a manner that as it turns in the rotor direction, it pushes the air down instead of up i.e. the air slides off of it downwards.","title":"Propeller Installation"},{"location":"drone-setup/#remote-control","text":"Ensure the Taranis has been setup following the Remote Control Setup Instructions . Go to the radio tab and follow the calibration procedure. Go to the flight modes page and set the channels like the image:","title":"Remote Control"},{"location":"drone-setup/#sensors","text":"On the sensors tab: Click on the orientations sub-tab, and set the autopilot orientation to ROTATION_ROLL_180_YAW_90 . Reboot if prompted. Important This is true if the arrow on the flight controller is pointed to the right if looked at from the bottom (orin on the back) Calibrate the gyroscope by putting the drone on a level surface, and then clicking the gyroscope button and following the wizard. Calibrate the accelometer by clicking on the accelerometer sub-tab and completing the procedure as prompted.","title":"Sensors"},{"location":"drone-setup/#software-setup","text":"1. Plug the external power into the XT60 cable for the battery. 1. Connect the host computer to the USB C port called \"Recovery Port\" on the carrier board. 2. Provide the carrier board with an internet connection via an Ethernet dongle on one of the three host USB-C ports on the long side of the carrier board 4. Press the button labelled \"RES\" on the Devboard 5. While pressing the RES button, press the REC button 6. Release the RES button while still pressing the REC button 7. Release the REC button after the power is connected 8. On the host computer, run lsusb . This sequence was a success if an entry with NVIDIA Corp. APX is visible ( ID 0955:7323 NVIDIA Corp. APX ) 9. Run the sdkmanager: sdkmanager --cli 10. Login, and then select the following options: install -> jetson -> target hardware 11. Select Jetson Orin NX, it should already be pre-selected 12. Reply Y to showing all Jetson versions. Select JetPack 6.2 13. Select both additional SDKs 14. Do not customize install settings 15. Reply N to flashing the Jetson Orin NX Module 16. Accept the license, then press enter twice for the installation to start. 17. Enter your password for administrative tasks. 18. It will install host components (on the PC) and target components. It will ask you whether to install or skip the installation on the Orin, choose skip. 19. Press enter to Exit.","title":"Software Setup"},{"location":"drone-setup/#flashing-process","text":"After the host components of the SDK are installed, run the following steps: Open the ~/nvidia/nvidia_sdk/JetPack_6.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra folder. Open a terminal in this folder. Download the post-install image from the Google Drive . Run the following command: tar -xvf /path/to/post-install_image.tar.gz -C ~/nvidia/nvidia_sdk/JetPack_6.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra/tools/backup_restore . This will take a while. Once this is done, make sure that the Orin is still in recovery mode (step 8 of Software Setup ), and run this command to flash the Jetson: sudo ./tools/backup_restore/l4t_backup_restore.sh -e nvme0n1 -r jetson-orin-nano-devkit-nvme . This will also take a while. Press the button labelled RES on the Jetson once the command has completed. Important Ensure you are in the Linux_for_Tegra folder","title":"Flashing Process"},{"location":"drone-setup/#post-flash-setup","text":"On the host computer, you should be able to SSH into the Orin now: ssh lis@192.168.55.1 . This connection is provided through the USB Recovery port. These are the default credentials: username: lis password: orin","title":"Post-Flash Setup"},{"location":"drone-setup/#password-free-access","text":"For password free access to the Orin, follow these steps: Ensure that you have an SSH key in ~/.ssh If not, run ssh-keygen -t ed25519 -C <yourCommentHere> With the USB connected, run ssh-copy-id lis@192.168.55.1 Make sure that the ssh-agent is on: eval `ssh-agent` Add your key to the agent: ssh-add Ensure that you can access the device without a password: ssh lis@192.168.55.1","title":"Password-Free Access"},{"location":"drone-setup/#ansible","text":"On the host computer, navigate to the ansible/ directory of the omni-nxt repo and run the playbook: ansible-playbook -i inventory.ini drone_setup.yml -K Enter the sudo password of the orin when prompted, as well as the hostname which should end with the same number that you set MAV_SYS_ID to in NXT Configuration and Calibration . Important It is very important that you set a unique hostname. You must follow the structured naming pattern described at the top of this document. The software depends on this assumption.","title":"Ansible"},{"location":"drone-setup/#flight-preparation","text":"","title":"Flight Preparation"},{"location":"drone-setup/#pid-tuning","text":"Follow all the steps in the Pre-Flight Checklist Launch the vehicle in position mode, and fly it slowly. Make sure that it feels decently well to operate. Hover the drone at 1.5 m, and ensure that it the drone is in the center of a 2x2x2m cube of free space. In QGroundControl, click on the Q on the top left and open the vehicle setup menu Click on PID Tuning Enable autotune Autotune the rate controller. Land, and save the parameters Takeoff again in a safety volume of 2x2x2m. Autotune the attitude controller. Land. If the autotune fails, you can increase the MC_AT_SYSID_AMP parameter by steps of 0.5, and trigger the autotune again.","title":"PID Tuning"},{"location":"drone-setup/#optitrack-setup","text":"Bring the drone into view of the OptiTrack sensors Place the drone in view of the OptiTrack cameras, and ensure that the drone is facing the positive x direction of the coordinate system. Select the drone's markers on the screen, right click, and click on create rigid body. Give each drone the same name as the hostname. This allows the automated tooling to work properly. Warning It is very important that the drone is facing the positive x direction (orin towards the negative x direction).","title":"Optitrack Setup"},{"location":"flying/","text":"Flying Pre-Flight Checklist Ensure that the inventory.ini file has all of the hostnames of the drones under [drones] . This selects the drones that the operators are done on. Ensure that the gcs_url variable in the preflight ansible ( /path/to/swarmnxtrepo/ansible/drones_preflight.yml ) is set to the correct hostname or IP address of the ground station . Run the pre-flight ansible: cd /path/to/swarmnxtrepo/ansible && ansible-playbook -i inventory.ini drones_preflight.yml -K . This will start or check: The position estimation services on each drone The mavros service on each drone. This provides information to QGroundControl, and the other services that mavros provides Checks if chronyc is tracking. This is currently just a boolean check, but can be expanded later to check latency. Open QGroundControl. Ensure every drone is connected. Check the EKF Tracking for each drone Check the ping between each drone and the ground station, both ways (TODO: Automate) Check the batteries are charged (TODO: Automate) Check that the rotors are not obstructed by any cables, and all cables are well-connected Optional: Run an Update You can run an update by going to the ansible/ directory and running the following command: ansible-playbook -i inventory.ini drones_update.yml -K This will update apt repositories, pull the latest version of ros packages, and build them. Terminal window.addEventListener(\"load\", function(event) { AsciinemaPlayer.create(\"/swarm-nxt/demos/drones_update.cast\", document.getElementById(\"asciinema-player-0\"), { cols: 80, rows: 24, autoPlay: false, preload: false, loop: false, startAt: \"0:00\", speed: 1.0, theme: \"asciinema\", fit: \"width\", controls: \"auto\", pauseOnMarkers: false, terminalFontSize: \"small\", terminalFontFamily: \"\", terminalLineHeight: 1.33333333, }); });","title":"Flying"},{"location":"flying/#flying","text":"","title":"Flying"},{"location":"flying/#pre-flight-checklist","text":"Ensure that the inventory.ini file has all of the hostnames of the drones under [drones] . This selects the drones that the operators are done on. Ensure that the gcs_url variable in the preflight ansible ( /path/to/swarmnxtrepo/ansible/drones_preflight.yml ) is set to the correct hostname or IP address of the ground station . Run the pre-flight ansible: cd /path/to/swarmnxtrepo/ansible && ansible-playbook -i inventory.ini drones_preflight.yml -K . This will start or check: The position estimation services on each drone The mavros service on each drone. This provides information to QGroundControl, and the other services that mavros provides Checks if chronyc is tracking. This is currently just a boolean check, but can be expanded later to check latency. Open QGroundControl. Ensure every drone is connected. Check the EKF Tracking for each drone Check the ping between each drone and the ground station, both ways (TODO: Automate) Check the batteries are charged (TODO: Automate) Check that the rotors are not obstructed by any cables, and all cables are well-connected","title":"Pre-Flight Checklist"},{"location":"flying/#optional-run-an-update","text":"You can run an update by going to the ansible/ directory and running the following command: ansible-playbook -i inventory.ini drones_update.yml -K This will update apt repositories, pull the latest version of ros packages, and build them. Terminal window.addEventListener(\"load\", function(event) { AsciinemaPlayer.create(\"/swarm-nxt/demos/drones_update.cast\", document.getElementById(\"asciinema-player-0\"), { cols: 80, rows: 24, autoPlay: false, preload: false, loop: false, startAt: \"0:00\", speed: 1.0, theme: \"asciinema\", fit: \"width\", controls: \"auto\", pauseOnMarkers: false, terminalFontSize: \"small\", terminalFontFamily: \"\", terminalLineHeight: 1.33333333, }); });","title":"Optional: Run an Update"},{"location":"infra-setup/","text":"Infrastructure Setup These instructions need to be followed once to setup the infrastructure to setup and operate the drones. Networking We recommend using the Ubiquiti Amplifi configured with the following settings ( verify these ): Dual Band Enabled Band optimization enabled WPA2/WPA3 PSK Authentication Ensure you edit the ssid and password variables in the ansible/group_vars/all file as described in Host Computer Setup Host Computer We recommend having a consistent and dedicated host computer that is used to run the central controller and manage the drone swarm. The requirements of this computer are as follows: A reliable Wi-Fi connection CPU: Performance of i7-5600U or better RAM: 8GB minimum Ubuntu 22.04 installed Ansible Installation On the computer, run the host computer ansible by running the following commands (if $HOME/.local/bin is already in PATH ( echo $PATH ), no need for last command): sudo apt update && sudo apt install python3 python3-pip python3 -m pip install --user ansible echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc For troubleshooting or more information, see the Ansible Documentation . Host Computer Setup This procedure will install required packages on the host computer and configure some networking. First, clone the swarm nxt repository in an easy to access place on the host computer, and install the requirements. sudo apt install git git clone https://github.com/lis-epfl/swarm-nxt Navigate to the ansible/ folder inside the repository Edit the variables in the ansible/group_vars/all file wifi_ssid : Enter the name of the Unifi SSID wifi_password : Enter the name of the Unifi password host_hostname : Enter the string you get when you type hostname in the terminal host_base_path : Enter the base path to where all the downloaded packages/files will be added. Run the host computer ansible: ansible-playbook -i inventory.ini host_computer.yml -K . Enter the sudo password of the host computer when prompted. Restart the PC, then check that dialout is there when you type groups in the terminal. Download STM32CubeProgrammer if you do not have it. Extract the folder, open it in terminal, and run sudo ./SetupSTM32CubeProgrammer-<version>.linux (replace <version> with the version you've downloaded) Walk through the wizard and install the program. Download the SDK Manager from the NVIDIA Website . Install it by running sudo dpkg -i /path/to/sdkmanager.deb . If required, install any missing dependencies with sudo apt --fix-broken install Visual Odometry (Optitrack) If using Optitrack as the odometry source, you must setup and configure an instance of Motive that is connected to the Optitrack system. This computer must also connect to the network described in the networking section via ethernet. This setup is out of scope for this guide. Safety Bounds Danger Take care in defining the bounds in this step to avoid drones flying where they should not fly This package has a safety module bounds_checker_ros2 that ensures two things: Generated trajectories stay within a polyhedron If the drone exits the polyhedron, executes a land command These bounds are defined by a bounds.json file that is in ansible/templates . Since this file is dependent on your particular environment, this file is NOT provided by default. An example file exists called bounds.json.example in ansible/templates , and is repeated here for demonstration: [ [ 1.0, 0.0, 0.0, 3.0], [ -1.0, 0.0, 0.0, 3.0], [ 0.0, 1.0, 0.0, 3.0], [ 0.0, -1.0, 0.0, 3.0], [ 0.0, 0.0, 1.0, 3.6], [ 0.0, 0.0, 1.0, 0.0] ] This is a 6x6x3.6m rectangular prism with the x and y axes centered on the origin and the z axis bounded from 0.0m to 3.6m. The format is an array of four dimensional arrays, with the first three elements defining the array normal vector, and the last element defining the offset from the origin: \\[ \\begin{bmatrix} \\begin{bmatrix} \\vec{n_0} & c_0 \\end{bmatrix} \\\\ \\vdots \\\\ \\begin{bmatrix} \\vec{n}_{N-1} & c_{N-1} \\end{bmatrix} \\end{bmatrix} \\] Points are safe when the system of inequalities \\(\\vec{p} \\cdot \\vec{n}_i - c_i \\leq 0\\) holds for all \\(i \\in \\{0, \\dots, N-1\\}\\) .","title":"Infrastructure Setup"},{"location":"infra-setup/#infrastructure-setup","text":"These instructions need to be followed once to setup the infrastructure to setup and operate the drones.","title":"Infrastructure Setup"},{"location":"infra-setup/#networking","text":"We recommend using the Ubiquiti Amplifi configured with the following settings ( verify these ): Dual Band Enabled Band optimization enabled WPA2/WPA3 PSK Authentication Ensure you edit the ssid and password variables in the ansible/group_vars/all file as described in Host Computer Setup","title":"Networking"},{"location":"infra-setup/#host-computer","text":"We recommend having a consistent and dedicated host computer that is used to run the central controller and manage the drone swarm. The requirements of this computer are as follows: A reliable Wi-Fi connection CPU: Performance of i7-5600U or better RAM: 8GB minimum Ubuntu 22.04 installed","title":"Host Computer"},{"location":"infra-setup/#ansible-installation","text":"On the computer, run the host computer ansible by running the following commands (if $HOME/.local/bin is already in PATH ( echo $PATH ), no need for last command): sudo apt update && sudo apt install python3 python3-pip python3 -m pip install --user ansible echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc For troubleshooting or more information, see the Ansible Documentation .","title":"Ansible Installation"},{"location":"infra-setup/#host-computer-setup","text":"This procedure will install required packages on the host computer and configure some networking. First, clone the swarm nxt repository in an easy to access place on the host computer, and install the requirements. sudo apt install git git clone https://github.com/lis-epfl/swarm-nxt Navigate to the ansible/ folder inside the repository Edit the variables in the ansible/group_vars/all file wifi_ssid : Enter the name of the Unifi SSID wifi_password : Enter the name of the Unifi password host_hostname : Enter the string you get when you type hostname in the terminal host_base_path : Enter the base path to where all the downloaded packages/files will be added. Run the host computer ansible: ansible-playbook -i inventory.ini host_computer.yml -K . Enter the sudo password of the host computer when prompted. Restart the PC, then check that dialout is there when you type groups in the terminal. Download STM32CubeProgrammer if you do not have it. Extract the folder, open it in terminal, and run sudo ./SetupSTM32CubeProgrammer-<version>.linux (replace <version> with the version you've downloaded) Walk through the wizard and install the program. Download the SDK Manager from the NVIDIA Website . Install it by running sudo dpkg -i /path/to/sdkmanager.deb . If required, install any missing dependencies with sudo apt --fix-broken install","title":"Host Computer Setup"},{"location":"infra-setup/#visual-odometry-optitrack","text":"If using Optitrack as the odometry source, you must setup and configure an instance of Motive that is connected to the Optitrack system. This computer must also connect to the network described in the networking section via ethernet. This setup is out of scope for this guide.","title":"Visual Odometry (Optitrack)"},{"location":"infra-setup/#safety-bounds","text":"Danger Take care in defining the bounds in this step to avoid drones flying where they should not fly This package has a safety module bounds_checker_ros2 that ensures two things: Generated trajectories stay within a polyhedron If the drone exits the polyhedron, executes a land command These bounds are defined by a bounds.json file that is in ansible/templates . Since this file is dependent on your particular environment, this file is NOT provided by default. An example file exists called bounds.json.example in ansible/templates , and is repeated here for demonstration: [ [ 1.0, 0.0, 0.0, 3.0], [ -1.0, 0.0, 0.0, 3.0], [ 0.0, 1.0, 0.0, 3.0], [ 0.0, -1.0, 0.0, 3.0], [ 0.0, 0.0, 1.0, 3.6], [ 0.0, 0.0, 1.0, 0.0] ] This is a 6x6x3.6m rectangular prism with the x and y axes centered on the origin and the z axis bounded from 0.0m to 3.6m. The format is an array of four dimensional arrays, with the first three elements defining the array normal vector, and the last element defining the offset from the origin: \\[ \\begin{bmatrix} \\begin{bmatrix} \\vec{n_0} & c_0 \\end{bmatrix} \\\\ \\vdots \\\\ \\begin{bmatrix} \\vec{n}_{N-1} & c_{N-1} \\end{bmatrix} \\end{bmatrix} \\] Points are safe when the system of inequalities \\(\\vec{p} \\cdot \\vec{n}_i - c_i \\leq 0\\) holds for all \\(i \\in \\{0, \\dots, N-1\\}\\) .","title":"Safety Bounds"},{"location":"manual-setup/","text":"Manual Setup These instructions are for documentation purposes, normal users do not need to follow them. They show how the images or parameter files used in the other sections were made. This section will be useful if you want to understand how to make those assets and change something in the default settings that we've assumed. Image Creation Important You do not need to follow all of these steps if you are simply flashing a pre-made image. Raw Image Setup These steps describe how to build the intial image for the NVIDIA Orin board. These steps are only necessary if you want to rebuild the raw image. Ensure that the devkit is turned off and the power unplugged, but ready to be plugged in Ensure that the devkit is connected to the host computer via the Recovery Port Press the button labelled \"REC\" on the Devboard While pressing the REC button, press the RES button Release the RES button while still pressing the REC button Connect the power to the Jetson, and release the REC button after the power is connected On the host computer, run lsusb . This sequence was a success if an entry with NVIDIA Corp. APX is visible ( ID 0955:7323 NVIDIA Corp. APX ) Download the SDK Manager from the NVIDIA Website . Your computer should be running the same OS version as you would like to be installed on the Orin. If not, you can run it in docker. These instructions can be found on the NVIDIA SDK Manager page. Then, run the following steps: Install the SDK Manager: sudo dpkg -i /path/to/sdkmanager.deb . If required, install any missing dependencies with sudo apt --fix-broken install Run the sdkmanager: sdkmanager --cli Login, and then select the following options: install -> jetson -> target hardare The Orin NX should already be detected, select it. Reply Y to showing all Jetson versions. Select JetPack 6.2 Additional SDKs: Customize install settings: Y Select all the options by using the arrow keys and space to select, enter to continue Reply Y to \"Do you want to flash Jetson Orin NX module?\". Select Pre-Config for OEM Config. Username: lis, Password: orin Choose NVME for the storage device Wait for the installation to finish. Select proxy mode Select the IP that you want the device to have. This documentation assumes 192.168.55.1 Warning If you get an error like \"cannot stat /dev/nvme0n1\", ensure that the flash storage is fully seated. Note The raw image was created after these steps. Password-Free Access You must set this up before running the playbook below. See Password-Free Access Run Ansible Playbook We use Ansible to facilitate idempotent configuration. Make sure Ansible is installed following the setup instructions Then, clone the repo , and open a terminal in the ansible directory. To make the following process faster, download the patched-kernel tarball from the Google Drive . Place this file in a folder called ansible/patched-kernel inside the repo. Ensure you are in the ansible/ folder of the repository. Run ansible-playbook -i inventory.ini drone_setup.yml -K . It will ask you for a BECOME password. It is the root password of the orin ( orin ). There should be no failed steps. Note The post install image was created after this step, with the hostname set to ubuntu Backups and Restores Common: On the host computer with the NVIDIA SDK installed, navigate to ~/nvidia/nvidia_sdk/JetPack_6.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra Create Image Procedure Prepare the device by installing what is required Cleanup any log files and unnecessary files to make the image compact Restart the device in recovery mode (follow the steps in Raw Image Setup ) Run sudo ./tools/backup_restore/l4t_backup_restore.sh -e nvme0n1 -b jetson-orin-nano-devkit-nvme Compress the image folder: cd tools/backup_restore && sudo tar -cvzf <name>.tar.gz images Save the compressed image for restore later. Restore Procedure Ensure that the image you want to restore is unzipped in tools/backup_restore/ (There should be a directory called images with various .img files inside) Ensure you are in the Linux_for_Tegra folder. Restart the device in recovery mode (follow the steps in Raw Image Setup ) Run sudo ./tools/backup_restore/l4t_backup_restore.sh -e nvme0n1 -r jetson-orin-nano-devkit-nvme NXT Flight Controller Setup These steps were followed to create the parameter file described in Drone Setup . This file only replaces the application of the parameter file part. You still must complete the rest of the setup described in the NXT Configuration and Calibration Section Airframe Important You must do this first, since it will reset the other values. Under airframe, select Quadcopter X, Generic Quadcopter. Click on apply and restart. General Settings If indoors, no GPS (assumed default) COM_ARM_WO_GPS : Warning COM_ARM_MAG_STR : Warning SYS_HAS_MAG , SYS_HAS_GPS , SYS_HAS_BARO : Set to 0/Disabled. RC_PORT_CONFIG : Radio Controller IMU_GYRO_RATEMAX : 2000Hz IMU_INTEG_RATE : 400Hz MAV_0_MODE : External Vision MAV_0_RATE : 92160 B/s Telemetry Set the following settings: MAV_0_CONFIG : TELEM 2 SER_TEL2_BAUD : 921600 8N1 Power Navigate to the power tab and fill in these settings: Source: Power Module Set the following items to match the battery you're using. We have provided the settings for the battery that we used: Set the number cells: 6 Empty Voltage: 2.56V Full Voltage: 4.05V Actuators Open the MAVLink console (in the Analyze Tools menu accessible from the Q button on the main screen). Input the coordinates of the actuators. It is done this way since the Actuators tab truncates values to two decimal places. param set CA_ROTOR0_PX 0.0535 param set CA_ROTOR0_PY 0.0535 param set CA_ROTOR1_PX -0.0535 param set CA_ROTOR1_PY -0.0535 param set CA_ROTOR2_PX 0.0535 param set CA_ROTOR2_PY -0.0535 param set CA_ROTOR3_PX -0.0535 param set CA_ROTOR3_PY 0.0535 These positions are relative to the center of gravity of the drone, so ensure that the battery is placed such that the CoG is truly at the middle of the drone. Then, go back to the Vehicle Setup menu and open the Actuators tab. DO NOT TOUCH THE POSITION TEXTBOXES since the values will truncate to two decimal places. Safety Setup On the Safety tab: Set the battery failsafe to land mode Set the RC loss failsafe to land mode Set the geofence failsafe to land mode Set the land mode speed to 0.3m/s and disarm after 7s. You will have to force save. On the parameters tab: Set COM_OBL_RC_ACT to Land Mode Set CBRK_SUPPLY_CHK to 0. Important If you do not set the CBRK_SUPPLY_CHK to zero, none of the battery related checks will execute! EKF Setup Set the following parameters in the Parameters screen: Parameter Value Notes EKF2_ACC_NOISE max_value (1.00) EKF2_ACC_B_NOISE max_value (0.01) EKF2_GYR_NOISE max_value (0.1) EKF2_GYR_B_NOISE max_value (0.01) EKF2_EV_NOISE_MD 0.0 EKF2_EVP_NOISE 0 Need to force save EKF2_EVA_NOISE 0 EKF2_EV_CTRL 11 Horizontal, Vertical, and Yaw should be checked EKF2_HGT_REF Vision EKF2_GPS_CTRL 0 EKF2_BARO_CTRL 0 EKF2_RNG_CTRL 0 Restart the drone by going to Tools > Restart.","title":"Manual Setup Instructions"},{"location":"manual-setup/#manual-setup","text":"These instructions are for documentation purposes, normal users do not need to follow them. They show how the images or parameter files used in the other sections were made. This section will be useful if you want to understand how to make those assets and change something in the default settings that we've assumed.","title":"Manual Setup"},{"location":"manual-setup/#image-creation","text":"Important You do not need to follow all of these steps if you are simply flashing a pre-made image.","title":"Image Creation"},{"location":"manual-setup/#raw-image-setup","text":"These steps describe how to build the intial image for the NVIDIA Orin board. These steps are only necessary if you want to rebuild the raw image. Ensure that the devkit is turned off and the power unplugged, but ready to be plugged in Ensure that the devkit is connected to the host computer via the Recovery Port Press the button labelled \"REC\" on the Devboard While pressing the REC button, press the RES button Release the RES button while still pressing the REC button Connect the power to the Jetson, and release the REC button after the power is connected On the host computer, run lsusb . This sequence was a success if an entry with NVIDIA Corp. APX is visible ( ID 0955:7323 NVIDIA Corp. APX ) Download the SDK Manager from the NVIDIA Website . Your computer should be running the same OS version as you would like to be installed on the Orin. If not, you can run it in docker. These instructions can be found on the NVIDIA SDK Manager page. Then, run the following steps: Install the SDK Manager: sudo dpkg -i /path/to/sdkmanager.deb . If required, install any missing dependencies with sudo apt --fix-broken install Run the sdkmanager: sdkmanager --cli Login, and then select the following options: install -> jetson -> target hardare The Orin NX should already be detected, select it. Reply Y to showing all Jetson versions. Select JetPack 6.2 Additional SDKs: Customize install settings: Y Select all the options by using the arrow keys and space to select, enter to continue Reply Y to \"Do you want to flash Jetson Orin NX module?\". Select Pre-Config for OEM Config. Username: lis, Password: orin Choose NVME for the storage device Wait for the installation to finish. Select proxy mode Select the IP that you want the device to have. This documentation assumes 192.168.55.1 Warning If you get an error like \"cannot stat /dev/nvme0n1\", ensure that the flash storage is fully seated. Note The raw image was created after these steps.","title":"Raw Image Setup"},{"location":"manual-setup/#password-free-access","text":"You must set this up before running the playbook below. See Password-Free Access","title":"Password-Free Access"},{"location":"manual-setup/#run-ansible-playbook","text":"We use Ansible to facilitate idempotent configuration. Make sure Ansible is installed following the setup instructions Then, clone the repo , and open a terminal in the ansible directory. To make the following process faster, download the patched-kernel tarball from the Google Drive . Place this file in a folder called ansible/patched-kernel inside the repo. Ensure you are in the ansible/ folder of the repository. Run ansible-playbook -i inventory.ini drone_setup.yml -K . It will ask you for a BECOME password. It is the root password of the orin ( orin ). There should be no failed steps. Note The post install image was created after this step, with the hostname set to ubuntu","title":"Run Ansible Playbook"},{"location":"manual-setup/#backups-and-restores","text":"Common: On the host computer with the NVIDIA SDK installed, navigate to ~/nvidia/nvidia_sdk/JetPack_6.2_Linux_JETSON_ORIN_NX_TARGETS/Linux_for_Tegra","title":"Backups and Restores"},{"location":"manual-setup/#create-image-procedure","text":"Prepare the device by installing what is required Cleanup any log files and unnecessary files to make the image compact Restart the device in recovery mode (follow the steps in Raw Image Setup ) Run sudo ./tools/backup_restore/l4t_backup_restore.sh -e nvme0n1 -b jetson-orin-nano-devkit-nvme Compress the image folder: cd tools/backup_restore && sudo tar -cvzf <name>.tar.gz images Save the compressed image for restore later.","title":"Create Image Procedure"},{"location":"manual-setup/#restore-procedure","text":"Ensure that the image you want to restore is unzipped in tools/backup_restore/ (There should be a directory called images with various .img files inside) Ensure you are in the Linux_for_Tegra folder. Restart the device in recovery mode (follow the steps in Raw Image Setup ) Run sudo ./tools/backup_restore/l4t_backup_restore.sh -e nvme0n1 -r jetson-orin-nano-devkit-nvme","title":"Restore Procedure"},{"location":"manual-setup/#nxt-flight-controller-setup","text":"These steps were followed to create the parameter file described in Drone Setup . This file only replaces the application of the parameter file part. You still must complete the rest of the setup described in the NXT Configuration and Calibration Section","title":"NXT Flight Controller Setup"},{"location":"manual-setup/#airframe","text":"Important You must do this first, since it will reset the other values. Under airframe, select Quadcopter X, Generic Quadcopter. Click on apply and restart.","title":"Airframe"},{"location":"manual-setup/#general-settings","text":"If indoors, no GPS (assumed default) COM_ARM_WO_GPS : Warning COM_ARM_MAG_STR : Warning SYS_HAS_MAG , SYS_HAS_GPS , SYS_HAS_BARO : Set to 0/Disabled. RC_PORT_CONFIG : Radio Controller IMU_GYRO_RATEMAX : 2000Hz IMU_INTEG_RATE : 400Hz MAV_0_MODE : External Vision MAV_0_RATE : 92160 B/s","title":"General Settings"},{"location":"manual-setup/#telemetry","text":"Set the following settings: MAV_0_CONFIG : TELEM 2 SER_TEL2_BAUD : 921600 8N1","title":"Telemetry"},{"location":"manual-setup/#power","text":"Navigate to the power tab and fill in these settings: Source: Power Module Set the following items to match the battery you're using. We have provided the settings for the battery that we used: Set the number cells: 6 Empty Voltage: 2.56V Full Voltage: 4.05V","title":"Power"},{"location":"manual-setup/#actuators","text":"Open the MAVLink console (in the Analyze Tools menu accessible from the Q button on the main screen). Input the coordinates of the actuators. It is done this way since the Actuators tab truncates values to two decimal places. param set CA_ROTOR0_PX 0.0535 param set CA_ROTOR0_PY 0.0535 param set CA_ROTOR1_PX -0.0535 param set CA_ROTOR1_PY -0.0535 param set CA_ROTOR2_PX 0.0535 param set CA_ROTOR2_PY -0.0535 param set CA_ROTOR3_PX -0.0535 param set CA_ROTOR3_PY 0.0535 These positions are relative to the center of gravity of the drone, so ensure that the battery is placed such that the CoG is truly at the middle of the drone. Then, go back to the Vehicle Setup menu and open the Actuators tab. DO NOT TOUCH THE POSITION TEXTBOXES since the values will truncate to two decimal places.","title":"Actuators"},{"location":"manual-setup/#safety-setup","text":"On the Safety tab: Set the battery failsafe to land mode Set the RC loss failsafe to land mode Set the geofence failsafe to land mode Set the land mode speed to 0.3m/s and disarm after 7s. You will have to force save. On the parameters tab: Set COM_OBL_RC_ACT to Land Mode Set CBRK_SUPPLY_CHK to 0. Important If you do not set the CBRK_SUPPLY_CHK to zero, none of the battery related checks will execute!","title":"Safety Setup"},{"location":"manual-setup/#ekf-setup","text":"Set the following parameters in the Parameters screen: Parameter Value Notes EKF2_ACC_NOISE max_value (1.00) EKF2_ACC_B_NOISE max_value (0.01) EKF2_GYR_NOISE max_value (0.1) EKF2_GYR_B_NOISE max_value (0.01) EKF2_EV_NOISE_MD 0.0 EKF2_EVP_NOISE 0 Need to force save EKF2_EVA_NOISE 0 EKF2_EV_CTRL 11 Horizontal, Vertical, and Yaw should be checked EKF2_HGT_REF Vision EKF2_GPS_CTRL 0 EKF2_BARO_CTRL 0 EKF2_RNG_CTRL 0 Restart the drone by going to Tools > Restart.","title":"EKF Setup"},{"location":"remote-control-setup/","text":"Remote Control Setup We use the Taranis Remote Control. Download the latest version of OpenTX for your RC from their website . To install it, unzip the files into the root directory of the MicroSD card, and plug the MicroSD card into the slot in the RC. The slot is above the battery. Ensure the TBX Nano RX is plugged into the RC slot on the flight controller. Plug in the TBS Micro TX into the controller. Profile Creation Once the Taranis has booted up, click on Menu. Then, follow the steps: Use the scroll wheel to the right of the screen to select an empty spot. Click and hold the scroll wheel until a menu comes up. Select Create model Scroll to the Quadcopter/Multi and select Click page repeatedly, keeping the default channels. On the main menu, ensure you're hovering over the newly created model. Click the Page button. Press the scroll wheel to enter the name field. Use the scroll wheel to select a character. Press the scroll wheel to move to the next character. Once the name is input, press and hold the scroll wheel over a blank character to save the name. Use the scroll wheel to scroll down to \"Internal RF\", and ensure it is set to \"None\" Use the scroll wheel to scroll down to \"External RF\", and ensure it is set to \"CSRF\". Crossfire Binding This is only required if you're binding a new pair of transmitters and receivers. Turn the drone on, and press the small button on the Nano RX. The light should turn turn blinking green. On the Taranis, ensure you're on the home page for the desired profile. The name of the profile should be present in a large font. Press and hold menu, and use the scroll wheel to navigate down to \"Crossfire config\". Click on it. Click on \"XF Micro TX\" Click on bind. It should turn to \"Binding OK\", and the light on the Nano RX should turn to solid green. Click Exit to go back, and then click on the \"XF Nano RX V3\" Ensure channels is set to 12. Ensure failsafe mode is set to the desired value: \"Cut\" if operating a single drone, disabled if swarm Scroll down to \"Output map\" and set Output 1 to SBUS Click exit until you're back at the main screen for your profile. There should be a radio link strength indicator beside the battery indicator. Mixes Setting Move back one level to the profile selection screen by pressing menu. Move the cursor over the profile you want to edit. Keep clicking page until mixes is seen. Keep CH1-4 as-is Change the source of CH5-CH8 by clicking and holding the scroll wheel, clicking edit, navigating to source, and clicking the scroll wheel. Then, flip the appropriate switch. Click exit twice to go back to the mixes screen. Channel Source Name CH5 SF Arm/Disarm CH6 SC Offboard CH7 SD Modes CH8 SA Kill","title":"Remote Control Setup"},{"location":"remote-control-setup/#remote-control-setup","text":"We use the Taranis Remote Control. Download the latest version of OpenTX for your RC from their website . To install it, unzip the files into the root directory of the MicroSD card, and plug the MicroSD card into the slot in the RC. The slot is above the battery. Ensure the TBX Nano RX is plugged into the RC slot on the flight controller. Plug in the TBS Micro TX into the controller.","title":"Remote Control Setup"},{"location":"remote-control-setup/#profile-creation","text":"Once the Taranis has booted up, click on Menu. Then, follow the steps: Use the scroll wheel to the right of the screen to select an empty spot. Click and hold the scroll wheel until a menu comes up. Select Create model Scroll to the Quadcopter/Multi and select Click page repeatedly, keeping the default channels. On the main menu, ensure you're hovering over the newly created model. Click the Page button. Press the scroll wheel to enter the name field. Use the scroll wheel to select a character. Press the scroll wheel to move to the next character. Once the name is input, press and hold the scroll wheel over a blank character to save the name. Use the scroll wheel to scroll down to \"Internal RF\", and ensure it is set to \"None\" Use the scroll wheel to scroll down to \"External RF\", and ensure it is set to \"CSRF\".","title":"Profile Creation"},{"location":"remote-control-setup/#crossfire-binding","text":"This is only required if you're binding a new pair of transmitters and receivers. Turn the drone on, and press the small button on the Nano RX. The light should turn turn blinking green. On the Taranis, ensure you're on the home page for the desired profile. The name of the profile should be present in a large font. Press and hold menu, and use the scroll wheel to navigate down to \"Crossfire config\". Click on it. Click on \"XF Micro TX\" Click on bind. It should turn to \"Binding OK\", and the light on the Nano RX should turn to solid green. Click Exit to go back, and then click on the \"XF Nano RX V3\" Ensure channels is set to 12. Ensure failsafe mode is set to the desired value: \"Cut\" if operating a single drone, disabled if swarm Scroll down to \"Output map\" and set Output 1 to SBUS Click exit until you're back at the main screen for your profile. There should be a radio link strength indicator beside the battery indicator.","title":"Crossfire Binding"},{"location":"remote-control-setup/#mixes-setting","text":"Move back one level to the profile selection screen by pressing menu. Move the cursor over the profile you want to edit. Keep clicking page until mixes is seen. Keep CH1-4 as-is Change the source of CH5-CH8 by clicking and holding the scroll wheel, clicking edit, navigating to source, and clicking the scroll wheel. Then, flip the appropriate switch. Click exit twice to go back to the mixes screen. Channel Source Name CH5 SF Arm/Disarm CH6 SC Offboard CH7 SD Modes CH8 SA Kill","title":"Mixes Setting"},{"location":"software-common-tasks/","text":"Common Software Tasks The various subheadings of this document are linked in other pages. This page is meant as a reference for commonly performed tasks. Password-Free Access For password free access to the Orin, follow these steps: Ensure that you have an SSH key in ~/.ssh If not, run ssh-keygen -t ed25519 -C <yourCommentHere> With the USB connected, run ssh-copy-id lis@192.168.55.1 Make sure that the ssh-agent is on: eval `ssh-agent` Add your key to the agent: ssh-add Ensure that you can access the device without a password: ssh lis@192.168.55.1 Wi-Fi Setup SSH into the Orin. The following is a reference for commands that you can use with nmcli : To see available Wi-Fi networks: nmcli device wifi list To connect to a network with simple auth (open or WPA2/WPA3 password): sudo nmtui -> Activate Connection, or: sudo nmcli connection add type wifi \\ con-name \"NetworkName\" \\ ssid \"SSID\" \\ wifi-sec.psk \"password\" \\ wifi-sec.key-mgmt \"wpa-psk\" To connect to a more complicated network (eduroam/epfl): sudo nmcli connection add type wifi \\ con-name \"epfl\" \\ ssid \"epfl\" \\ wifi-sec.key-mgmt wpa-eap \\ 802-1x.eap ttls \\ 802-1x.phase2-auth mschapv2 \\ 802-1x.identity \"YourUsername\" \\ 802-1x.password \"YourPassword\" \\ 802-11-wireless.bssid \"AA:BB:CC:DD:EE:FF\" Replace YourUsername, YourPassword with your GASPAR credentials. You can find the bssid of your local router by nmcli device wifi list . Use that instead of AA:BB:CC:DD:EE:FF . To activate a connection, you can either use sudo nmtui , or: `nmcli con up Wireless Connection to QGroundControl This is done with mavros. This should be done with the preflight Ansible. You can inspect the script in ansible/scripts/mavros_start.sh and the lines related to Mavros in ansible/drones_preflight.yml . Get IP of Computer You can get the internet protocol address of a Linux computer by running ifconfig and looking for the four numbers after inet under the interface that you care about. Wireless interfaces typically begin with w , and ethernet interfaces typically begin with e . On most networks, you can usually use hostname.local in place of the IP address if the two computers are on the same network. Replace hostname with the hostname of the computer. You can get the hostname by running: hostname or hostnamectl on the computer. Rescue Unreachable Device If you do not know the IP address of a drone, you can try these steps to find it's IP: Try restarting everything first. Try running avahi-resolve -n hostname.local while on the same network. Try running avahi-resolve -n hostname-2.local . Sometimes, the original hostname gets reserved and this becomes a fallback. If this works, you can run avahi-publish in the background with the original hostname to force it to work. Connect to the recovery port using a USB-C cable. You should be able to SSH into the device at 192.168.55.1 and use ifconfig to find the IP. Then, you can use avahi-resolve -a <ip> to find the mDNS hostname. VNC/Remote Desktop Setup On the host computer, go to terminal and type gvncviewer lis@nxt1.local where nxt1 is the hostname of the Orin on which is on the same network as the host computer. Then input the password 'orin'. This will allow you do remote desktop into the Orin. You can also replace nxt1.local with the full IP address of the orin e.g. gvncviewer lis@192.168.55.1 . Important If you want to connect the Orin to an external monitor, you have to first modify /etc/X11/xorg.conf and comment all the the paragraph that starts with Section \"Device\" and contains Identifier \"Dummy0\" , as well as all the lines after it. ROS Package Management The ansible setup automatically installs convenient bash aliases for managing the ROS packages systemd service on both host computers and drones. These aliases simplify common systemctl operations: Available Aliases ros_status - Check the status of the ros_packages service ( systemctl --user status ros_packages ) ros_start - Start the ros_packages service ( systemctl --user start ros_packages ) ros_stop - Stop the ros_packages service ( systemctl --user stop ros_packages ) ros_restart - Restart the ros_packages service ( systemctl --user restart ros_packages ) Log Viewing Function ros_logs [arguments] - View logs from the ros_packages service with optional journalctl arguments Examples: ros_logs # View all logs ros_logs -f # Follow logs in real-time ros_logs --this-boot # Show logs from current boot only ros_logs -n 50 # Show last 50 lines ros_logs --since \"1 hour ago\" # Show logs from last hour Updating Drone Software Use the drones_update.yml playbook to update and rebuild the ROS packages on drones: # Regular update (incremental build) ansible-playbook ansible/drones_update.yml # Clean build (removes build/ and install/ directories first) ansible-playbook ansible/drones_update.yml -e clean_build=true The clean build option is useful when: - Switching between branches with significant changes - Resolving build cache issues - After updating message definitions or package dependencies - Troubleshooting package discovery problems Data Logging with ROS Bag The SwarmNXT system automatically records flight data using the standard ROS 2 bag recording functionality. This section covers how to configure and use the logging system. Logging Overview The system uses ros2 bag record integrated into the drone launch files to automatically capture: - MAVROS topics (position, state, IMU data) - Drone planner commands - Safety checker outputs - Custom application topics All data is stored in MCAP format for efficient storage and playback. Configuring Logged Topics Topics to log are configured in the Ansible inventory file ansible/group_vars/all : # Configure which topics to record drone_rosbag_topics: - \"/{{ ns }}/*\" # All topics in drone namespace # Or specify individual topics: # - \"/{{ ns }}/mavros/local_position/pose\" # - \"/{{ ns }}/mavros/state\" # - \"/{{ ns }}/mavros/imu/data\" Common Topic Configurations Basic Flight Logging drone_rosbag_topics: - \"/{{ ns }}/mavros/local_position/pose\" - \"/{{ ns }}/mavros/state\" - \"/{{ ns }}/mavros/setpoint_position/local\" Complete Mission Logging drone_rosbag_topics: - \"/{{ ns }}/mavros/*\" - \"/{{ ns }}/drone_planner/*\" - \"/{{ ns }}/swarmnxt_controller/*\" - \"/{{ ns }}/latency_checker/*\" Debug Logging drone_rosbag_topics: - \"/{{ ns }}/*\" # All drone topics - \"/optitrack_multiplexer_node/*\" # OptiTrack data Recorded Data Location Bag files are automatically saved to: - Location : $ROS_LOG_DIR/bag/ on each drone - Format : MCAP ( .mcap files) - Size limit : 1 GiB per file (automatically splits) Viewing Recorded Data # List available bag files ls $ROS_LOG_DIR/bag/ # Get information about a bag file ros2 bag info /path/to/bag_file # Play back recorded data ros2 bag play /path/to/bag_file # Play specific topics only ros2 bag play /path/to/bag_file --topics /nxt1/mavros/local_position/pose /nxt1/mavros/state Data Analysis # Convert MCAP to other formats ros2 bag convert -i input.mcap -o output_folder --output-options \"format=rosbag2_storage_sqlite\" # Extract data for analysis ros2 topic echo --bag /path/to/bag_file /topic_name > data.txt # Use with plotjuggler for visualization ros2 run plotjuggler plotjuggler --buffer-size 100000 # Then: File -> Load Data -> Load ROS2 bag Check EKF Tracking To check EKF tracking, perform the following steps: On the host computer, make sure ros is sourced: source /opt/ros/humble/setup.bash Ensure the ROS_DOMAIN_ID is set to the same value as the drones. By default, this is 1. You can check in ansible/group_vars/all : export ROS_DOMAIN_ID=<domain id> Run plotjuggler: ros2 run plotjuggler plotjuggler In plotjuggler, add: /mavros/local_position/pose xyz, orientation quaternions (EKF Output) /mavros/vision_pose/pose_cov xyz, orientation quaternions (optitrack) Move the drone around in all directions and ensure there are no discontinuities, and the values are tracking each other. Rotate the drone in different directions and ensure the values are tracking each other Common Issues Ansible Stuck There are a few reasons that ansible can be stuck. Sometimes, the wrong BECOME password is provided. This may result in a long time without any feedback. If the password is correct, it is possible that the host or target went to sleep or shutdown in the middle of a play. This can result in Ansible trying to use a dead ssh session. In this case, try deleting the ~/.ansible/cp folder and restarting the play.","title":"Common Software Tasks"},{"location":"software-common-tasks/#common-software-tasks","text":"The various subheadings of this document are linked in other pages. This page is meant as a reference for commonly performed tasks.","title":"Common Software Tasks"},{"location":"software-common-tasks/#password-free-access","text":"For password free access to the Orin, follow these steps: Ensure that you have an SSH key in ~/.ssh If not, run ssh-keygen -t ed25519 -C <yourCommentHere> With the USB connected, run ssh-copy-id lis@192.168.55.1 Make sure that the ssh-agent is on: eval `ssh-agent` Add your key to the agent: ssh-add Ensure that you can access the device without a password: ssh lis@192.168.55.1","title":"Password-Free Access"},{"location":"software-common-tasks/#wi-fi-setup","text":"SSH into the Orin. The following is a reference for commands that you can use with nmcli : To see available Wi-Fi networks: nmcli device wifi list To connect to a network with simple auth (open or WPA2/WPA3 password): sudo nmtui -> Activate Connection, or: sudo nmcli connection add type wifi \\ con-name \"NetworkName\" \\ ssid \"SSID\" \\ wifi-sec.psk \"password\" \\ wifi-sec.key-mgmt \"wpa-psk\" To connect to a more complicated network (eduroam/epfl): sudo nmcli connection add type wifi \\ con-name \"epfl\" \\ ssid \"epfl\" \\ wifi-sec.key-mgmt wpa-eap \\ 802-1x.eap ttls \\ 802-1x.phase2-auth mschapv2 \\ 802-1x.identity \"YourUsername\" \\ 802-1x.password \"YourPassword\" \\ 802-11-wireless.bssid \"AA:BB:CC:DD:EE:FF\" Replace YourUsername, YourPassword with your GASPAR credentials. You can find the bssid of your local router by nmcli device wifi list . Use that instead of AA:BB:CC:DD:EE:FF . To activate a connection, you can either use sudo nmtui , or: `nmcli con up","title":"Wi-Fi Setup"},{"location":"software-common-tasks/#wireless-connection-to-qgroundcontrol","text":"This is done with mavros. This should be done with the preflight Ansible. You can inspect the script in ansible/scripts/mavros_start.sh and the lines related to Mavros in ansible/drones_preflight.yml .","title":"Wireless Connection to QGroundControl"},{"location":"software-common-tasks/#get-ip-of-computer","text":"You can get the internet protocol address of a Linux computer by running ifconfig and looking for the four numbers after inet under the interface that you care about. Wireless interfaces typically begin with w , and ethernet interfaces typically begin with e . On most networks, you can usually use hostname.local in place of the IP address if the two computers are on the same network. Replace hostname with the hostname of the computer. You can get the hostname by running: hostname or hostnamectl on the computer.","title":"Get IP of Computer"},{"location":"software-common-tasks/#rescue-unreachable-device","text":"If you do not know the IP address of a drone, you can try these steps to find it's IP: Try restarting everything first. Try running avahi-resolve -n hostname.local while on the same network. Try running avahi-resolve -n hostname-2.local . Sometimes, the original hostname gets reserved and this becomes a fallback. If this works, you can run avahi-publish in the background with the original hostname to force it to work. Connect to the recovery port using a USB-C cable. You should be able to SSH into the device at 192.168.55.1 and use ifconfig to find the IP. Then, you can use avahi-resolve -a <ip> to find the mDNS hostname.","title":"Rescue Unreachable Device"},{"location":"software-common-tasks/#vncremote-desktop-setup","text":"On the host computer, go to terminal and type gvncviewer lis@nxt1.local where nxt1 is the hostname of the Orin on which is on the same network as the host computer. Then input the password 'orin'. This will allow you do remote desktop into the Orin. You can also replace nxt1.local with the full IP address of the orin e.g. gvncviewer lis@192.168.55.1 . Important If you want to connect the Orin to an external monitor, you have to first modify /etc/X11/xorg.conf and comment all the the paragraph that starts with Section \"Device\" and contains Identifier \"Dummy0\" , as well as all the lines after it.","title":"VNC/Remote Desktop Setup"},{"location":"software-common-tasks/#ros-package-management","text":"The ansible setup automatically installs convenient bash aliases for managing the ROS packages systemd service on both host computers and drones. These aliases simplify common systemctl operations:","title":"ROS Package Management"},{"location":"software-common-tasks/#available-aliases","text":"ros_status - Check the status of the ros_packages service ( systemctl --user status ros_packages ) ros_start - Start the ros_packages service ( systemctl --user start ros_packages ) ros_stop - Stop the ros_packages service ( systemctl --user stop ros_packages ) ros_restart - Restart the ros_packages service ( systemctl --user restart ros_packages )","title":"Available Aliases"},{"location":"software-common-tasks/#log-viewing-function","text":"ros_logs [arguments] - View logs from the ros_packages service with optional journalctl arguments Examples: ros_logs # View all logs ros_logs -f # Follow logs in real-time ros_logs --this-boot # Show logs from current boot only ros_logs -n 50 # Show last 50 lines ros_logs --since \"1 hour ago\" # Show logs from last hour","title":"Log Viewing Function"},{"location":"software-common-tasks/#updating-drone-software","text":"Use the drones_update.yml playbook to update and rebuild the ROS packages on drones: # Regular update (incremental build) ansible-playbook ansible/drones_update.yml # Clean build (removes build/ and install/ directories first) ansible-playbook ansible/drones_update.yml -e clean_build=true The clean build option is useful when: - Switching between branches with significant changes - Resolving build cache issues - After updating message definitions or package dependencies - Troubleshooting package discovery problems","title":"Updating Drone Software"},{"location":"software-common-tasks/#data-logging-with-ros-bag","text":"The SwarmNXT system automatically records flight data using the standard ROS 2 bag recording functionality. This section covers how to configure and use the logging system.","title":"Data Logging with ROS Bag"},{"location":"software-common-tasks/#logging-overview","text":"The system uses ros2 bag record integrated into the drone launch files to automatically capture: - MAVROS topics (position, state, IMU data) - Drone planner commands - Safety checker outputs - Custom application topics All data is stored in MCAP format for efficient storage and playback.","title":"Logging Overview"},{"location":"software-common-tasks/#configuring-logged-topics","text":"Topics to log are configured in the Ansible inventory file ansible/group_vars/all : # Configure which topics to record drone_rosbag_topics: - \"/{{ ns }}/*\" # All topics in drone namespace # Or specify individual topics: # - \"/{{ ns }}/mavros/local_position/pose\" # - \"/{{ ns }}/mavros/state\" # - \"/{{ ns }}/mavros/imu/data\"","title":"Configuring Logged Topics"},{"location":"software-common-tasks/#common-topic-configurations","text":"","title":"Common Topic Configurations"},{"location":"software-common-tasks/#basic-flight-logging","text":"drone_rosbag_topics: - \"/{{ ns }}/mavros/local_position/pose\" - \"/{{ ns }}/mavros/state\" - \"/{{ ns }}/mavros/setpoint_position/local\"","title":"Basic Flight Logging"},{"location":"software-common-tasks/#complete-mission-logging","text":"drone_rosbag_topics: - \"/{{ ns }}/mavros/*\" - \"/{{ ns }}/drone_planner/*\" - \"/{{ ns }}/swarmnxt_controller/*\" - \"/{{ ns }}/latency_checker/*\"","title":"Complete Mission Logging"},{"location":"software-common-tasks/#debug-logging","text":"drone_rosbag_topics: - \"/{{ ns }}/*\" # All drone topics - \"/optitrack_multiplexer_node/*\" # OptiTrack data","title":"Debug Logging"},{"location":"software-common-tasks/#recorded-data-location","text":"Bag files are automatically saved to: - Location : $ROS_LOG_DIR/bag/ on each drone - Format : MCAP ( .mcap files) - Size limit : 1 GiB per file (automatically splits)","title":"Recorded Data Location"},{"location":"software-common-tasks/#viewing-recorded-data","text":"# List available bag files ls $ROS_LOG_DIR/bag/ # Get information about a bag file ros2 bag info /path/to/bag_file # Play back recorded data ros2 bag play /path/to/bag_file # Play specific topics only ros2 bag play /path/to/bag_file --topics /nxt1/mavros/local_position/pose /nxt1/mavros/state","title":"Viewing Recorded Data"},{"location":"software-common-tasks/#data-analysis","text":"# Convert MCAP to other formats ros2 bag convert -i input.mcap -o output_folder --output-options \"format=rosbag2_storage_sqlite\" # Extract data for analysis ros2 topic echo --bag /path/to/bag_file /topic_name > data.txt # Use with plotjuggler for visualization ros2 run plotjuggler plotjuggler --buffer-size 100000 # Then: File -> Load Data -> Load ROS2 bag","title":"Data Analysis"},{"location":"software-common-tasks/#check-ekf-tracking","text":"To check EKF tracking, perform the following steps: On the host computer, make sure ros is sourced: source /opt/ros/humble/setup.bash Ensure the ROS_DOMAIN_ID is set to the same value as the drones. By default, this is 1. You can check in ansible/group_vars/all : export ROS_DOMAIN_ID=<domain id> Run plotjuggler: ros2 run plotjuggler plotjuggler In plotjuggler, add: /mavros/local_position/pose xyz, orientation quaternions (EKF Output) /mavros/vision_pose/pose_cov xyz, orientation quaternions (optitrack) Move the drone around in all directions and ensure there are no discontinuities, and the values are tracking each other. Rotate the drone in different directions and ensure the values are tracking each other","title":"Check EKF Tracking"},{"location":"software-common-tasks/#common-issues","text":"","title":"Common Issues"},{"location":"software-common-tasks/#ansible-stuck","text":"There are a few reasons that ansible can be stuck. Sometimes, the wrong BECOME password is provided. This may result in a long time without any feedback. If the password is correct, it is possible that the host or target went to sleep or shutdown in the middle of a play. This can result in Ansible trying to use a dead ssh session. In this case, try deleting the ~/.ansible/cp folder and restarting the play.","title":"Ansible Stuck"}]}