- name: Drones Update
  hosts: drones
  remote_user: lis
  become: false
  
  tasks: 
  - name: Ensure ros2 ws exists
    ansible.builtin.file:
      path: "{{ drone_ros_path }}/src"
      state: directory

  - name: Optitrack
    when: "position_estimation == 'optitrack'"
    block: 
    
    - name: Get optitrack package
      ansible.builtin.git:
        repo: https://github.com/lis-epfl/optitrack_packages_ros2/
        dest: "{{ drone_ros_path }}/src/optitrack_packages_ros2"
        force: yes

    - name: Remove multiplexer
      ansible.builtin.file: 
        path: "{{ drone_ros_path }}/src/optitrack_packages_ros2/optitrack_multiplexer_ros2"
        state: absent

    - name: Remove wrapper
      ansible.builtin.file:   
        path: "{{ drone_ros_path }}/src/optitrack_packages_ros2/optitrack_wrapper_ros2"
        state: absent
    
    - name: Get mocap to vision package
      ansible.builtin.git: 
        repo: https://github.com/lis-epfl/mocap_to_vision_pose_ros2
        dest: "{{ drone_ros_path }}/src/mocap_to_vision_pose_ros2"
        version: "niel/fix-check-launch" # TODO: temp
        force: yes 
    - name: SwarmNXT Nodes
      block: 
        - name: Get repository 
          ansible.builtin.git: 
              repo: https://github.com/lis-epfl/swarm-nxt
              dest: "{{ drone_base_path }}/repos/swarm-nxt"
              version: devel
              force: yes
          
        - name: List ros_packages directories
          ansible.builtin.find:
            paths: "{{ drone_base_path }}/repos/swarm-nxt/ros_packages"
            file_type: directory
            recurse: false
          register: ros_packages_reg
        

        - name: Link ros_packages directories to src
          ansible.builtin.file:
            src: "{{ item.path }}"
            dest: "{{ drone_ros_path }}/src/{{ item.path | basename }}"
            state: link
            force: true
          loop: "{{ ros_packages_reg.files }}"
        
    - name: Install rosdeps
      become: true
      ansible.builtin.shell: |
        cd {{ drone_ros_path }}
        . /opt/ros/humble/setup.sh
        rosdep init
        rosdep update
        rosdep install --from-paths {{ drone_ros_path }}/src -y --ignore-src -r
             
    - name: Clean previous build
      when: clean_build | default(false) | bool
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ drone_ros_path }}/build"
        - "{{ drone_ros_path }}/install"
    
    - name: Build ros packages
      ansible.builtin.shell: . /opt/ros/humble/setup.sh && colcon build  
      args:
        chdir: "{{ drone_ros_path }}"
      async: 2400
      poll: 0
      register: ros_build_async
     
    - name: Ensure params
      block: 
        - name: Send script
          ansible.builtin.template:
            src: "scripts/ensure_params.py"
            dest: "/tmp/ensure_params.py"
        - name: Ensure config folder exists
          ansible.builtin.file: 
            path: "{{ drone_ros_path }}/config"
            state: 'directory'
        - name: Send params file
          ansible.builtin.template:
            src: "scripts/params.yaml"
            dest: "{{ drone_ros_path }}/config/params.yaml"
        - name: Run ensure params script
          ansible.builtin.shell: 
            cmd: python3 /tmp/ensure_params.py
          register: ensure_params_reg
          changed_when: ensure_params_reg.rc == 10
          failed_when: ensure_params_reg.rc != 0 and ensure_params_reg.rc != 10

    - name: Wait for ros build to finish 
      ansible.builtin.async_status: 
        jid: "{{ ros_build_async.ansible_job_id }}"
      register: build_ros_result
      until: build_ros_result.finished
      retries: 100
      delay: 10

    - name: Cleanup async
      ansible.builtin.async_status:
        jid: "{{ ros_build_async.ansible_job_id }}"
        mode: cleanup
      changed_when: false
    

      
    
