---
- name: Host Dependencies
  hosts: localhost
  connection: local 
  become: no

        
  tasks: 
    - name: Setup base path 
      ansible.builtin.file: 
        path: "{{ host_base_path }}"
        state: directory
    - name: Add WiFi
      become: yes
      community.general.nmcli: 
        type: wifi
        conn_name: default_drones
        ifname: "{{ host_wifi_interface }}"
        ssid: "{{ wifi_ssid }}"
        wifi_sec: 
          key-mgmt: wpa-psk
          psk: "{{ wifi_password }}"
        autoconnect: true
        state: present
        
    - name: Setup ROS
      become: yes
      block: 
        - name: Add ROS 2 apt
          block:
            - name: Get software-properties-common
              ansible.builtin.apt: 
                name: software-properties-common

            - name: Ensure universe is added
              ansible.builtin.shell: apt-add-repository -y universe

            - name: Add apt key 
              ansible.builtin.get_url:
                url: https://raw.githubusercontent.com/ros/rosdistro/master/ros.key
                dest: /usr/share/keyrings/ros-archive-keyring.gpg
            
            - name: Get architecture
              ansible.builtin.shell: dpkg --print-architecture
              register: deb_arch
              changed_when: false 

            - name: Add ROS Repository
              ansible.builtin.apt_repository:
                repo: "deb [arch={{ deb_arch.stdout }} signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu {{ ansible_distribution_release }} main"
                state: present
            - name: Download base ROS 
              ansible.builtin.include_tasks: "tasks/download-ros.yml"
            - name: Download ROS
              ansible.builtin.apt:
                name: 
                  - ros-humble-desktop
                  - ros-humble-plotjuggler
                update_cache: true
                state: latest   
            - name: Get Geographic Lib
              ansible.builtin.include_tasks: "tasks/geographic-lib.yml"       
            
    - name: Set domain id and ROS aliases
      ansible.builtin.blockinfile: 
        path: ~/.bashrc
        block: |
          export ROS_DOMAIN_ID={{ drone_num }}
          
          # ROS package systemctl aliases
          alias ros_status='systemctl --user status ros_packages'
          alias ros_start='systemctl --user start ros_packages'
          alias ros_stop='systemctl --user stop ros_packages'
          alias ros_restart='systemctl --user restart ros_packages'
          
          # ROS package logs function with argument support
          ros_logs() {
            journalctl --user -u ros_packages "$@"
          }
    - name: VNC Viewer
      become: yes
      ansible.builtin.apt:
        name: gvncviewer
    - name: Chrony Setup
      become: yes
      block: 
        - name: Get Chrony
          ansible.builtin.apt: 
            name: chrony
        - name: Remove all sources
          ansible.builtin.replace: 
            path: /etc/chrony/chrony.conf
            regexp: "^((pool)|(sourcedir))"
            replace: "# \\1"
        # - name: Set allowed subnets
        #   ansible.builtin.blockinfile:
        #     path: /etc/chrony/chrony.conf
        #     marker: "# {mark} ANSIBLE MANAGED BLOCK"
        #     block: | # change the allowed subnets in ansible/group_vars/all
        #       {% for subnet in chrony_allowed_subnets %}
        #       allow {{ subnet }}
        #       {% endfor %}
        #   register: chrony_conf
        # - name: Restart the service
        #   when: chrony_conf.changed
        #   ansible.builtin.systemd_service:
        #     name: chronyd
        #     state: restarted
    - name: Optitrack Packages
      become: false
      block: 
        - name: Make ws folder
          ansible.builtin.file:
            path: "{{ host_ros_path }}/src"
            state: directory
        - name: Get optitrack packages
          ansible.builtin.git: 
            repo: https://github.com/lis-epfl/optitrack_packages_ros2/
            dest: "{{ host_ros_path }}/src/optitrack_packages_ros2"
            force: yes

    
    - name: Swarm Nodes
      block: 
        - name: Get swarm package 
          ansible.builtin.git: 
            repo: https://github.com/lis-epfl/swarm-nxt
            dest: "{{ host_base_path }}/repos/swarm-nxt"
            force: yes
            version: devel
        - name: Link latency to ros_ws
          ansible.builtin.file: 
            src: "{{ host_base_path }}/repos/swarm-nxt/ros_packages/latency_checker_ros2"
            dest: "{{ host_ros_path }}/src/latency_checker_ros2"
            state: link

        - name: Link messages to ros_ws
          ansible.builtin.file: 
            src: "{{ host_base_path }}/repos/swarm-nxt/ros_packages/swarmnxt_msgs"
            dest: "{{ host_ros_path }}/src/swarmnxt_msgs"
            state: link
    
    - name: Run rosdep
      become: yes
      ansible.builtin.shell: |
        cd {{ host_ros_path }}
        . /opt/ros/humble/setup.sh
        rosdep init
        rosdep update
        rosdep install --from-paths src --ignore-src -r -y

    - name: Build ROS Packages
      ansible.builtin.shell: "cd {{ host_ros_path }} && . /opt/ros/humble/setup.sh && colcon build"

    - name: Make path
      ansible.builtin.file: 
        path: "{{ host_fc_path }}"
        state: directory
        mode: "0755"
    - name: NXT APT Dependencies
      become: yes
      ansible.builtin.apt:
        update_cache: true
        name: 
          - gcc-arm-none-eabi=15:10.3-2021.07-4
          - fuse=2.9.9-5ubuntu3
          - gstreamer1.0-plugins-bad=1.20.3-0ubuntu1.1
          - gstreamer1.0-libav=1.20.3-0ubuntu1
          - gstreamer1.0-gl=1.20.1-1ubuntu0.4
          - libfuse2=2.9.9-5ubuntu3
          - libxcb-xinerama0=1.14-3ubuntu3 
          - libxkbcommon-x11-0=1.4.0-1 
          - libxcb-cursor-dev=0.1.1-4ubuntu1
    - name: Allow rootless access to flight controller (needed for QGroundControl)
      become: true
      ansible.builtin.user: 
        name: "{{ ansible_user_id }}"
        groups: dialout
        append: true
    - name: Remove modemmanager (needed for QGroundControl)
      become: true
      ansible.builtin.apt:
        name: modemmanager
        state: absent
    - name: Download necessary items
      become: false
      block: 
      - name: Get QGroundControl
        ansible.builtin.get_url:
          url: https://d176tv9ibo4jno.cloudfront.net/latest/QGroundControl.AppImage
          dest: "{{ host_fc_path }}/QGroundControl.AppImage"
          mode: '0755' # executable for us
      - name: Install required python packages for PX4
        ansible.builtin.pip:
          name:
            - kconfiglib==14.1.0
            - pyros-genmsg==0.5.8
            - jsonschema==4.24.0
      - name: Clone px4 repository
        ansible.builtin.git: 
          repo: "https://github.com/PX4/PX4-Autopilot"
          version: v1.15.4
          dest: "{{ host_fc_path }}/PX4-Autopilot"
          force: yes
      - name: Build bootloader
        community.general.make:
          chdir: "{{ host_fc_path }}/PX4-Autopilot"
          target: hkust_nxt-dual_bootloader
      - name: Build main code
        community.general.make:
          chdir: "{{ host_fc_path }}/PX4-Autopilot"
          target: hkust_nxt-dual        
          

