---
- name: Pre-Setup
  hosts: local_drone
  remote_user: lis
  become: yes # runs everything with sudo 
  vars_prompt: 
    - name: hostname
      prompt: "Enter the hostname the device should have (it should be unique)"
      confirm: true
      private: false

  tasks:
  - name: Check kernel, patch if needed
    ansible.builtin.include_tasks: "tasks/patch-kernel.yml"       
  - name: Perform a safe upgrade # installs new packages if needed
    ansible.builtin.apt:
      update_cache: yes
      upgrade: "safe"
  - name: Ensure apt packages are installed
    ansible.builtin.apt: 
      name: 
        - python3-pip 
        - htop 
        - sysstat
        - chrony
      state: latest

  - name: Jetson Stats
    ansible.builtin.pip:
      name: 
        - jetson-stats

  - name: Ensure Jetson clocks service
    ansible.builtin.template: 
      src: templates/jetson_clocks.j2
      dest: /etc/systemd/system/jetson_clocks.service

  - name: Start and enable clocks service
    ansible.builtin.systemd:
      name: jetson_clocks
      state: started
      enabled: true
      daemon_reload: true

  - name: Set max power mode 
    ansible.builtin.command: nvpmodel -m 0 --force
    async: 1
    poll: 0 # skip to next task 
    ignore_errors: true # TODO: make this less fragile
  
  - name: Wait for the system to come back up
    ansible.builtin.wait_for_connection:
      delay: 10
      timeout: 360 
  
  - name: Ensure power save disable service
    ansible.builtin.template: 
      src: templates/disable-wifi-powersave.j2
      dest: /etc/systemd/system/disable-wifi-powersave.service
  
  - name: Start and enable the power save inhibition service
    ansible.builtin.systemd:
      name: disable-wifi-powersave
      state: started
      enabled: true
      daemon_reload: true

  - name: "Setup VNC"
    block: 
      - name: Enable Automatic Login
        ansible.builtin.lineinfile: 
          path: /etc/gdm3/custom.conf
          regexp: 'AutomaticLoginEnable'
          line: 'AutomaticLoginEnable=true'
      - name: Set automatic login user
        ansible.builtin.lineinfile: 
          path: /etc/gdm3/custom.conf
          regexp: 'AutomaticLogin'
          line: 'AutomaticLogin=lis'
      - name: Install xorg dummy
        ansible.builtin.apt: 
          name: 
            - xserver-xorg-video-dummy
            - vino
      - name: Add vino to graphical session wants
        ansible.builtin.file: 
          src: /usr/lib/systemd/user/vino-server.service
          path: /usr/lib/systemd/user/graphical-session.target.wants/vino-server.service
          state: "link"
      - name: "Set gsettings"
        become: false
        block:
          # TODO: for some reason the community dcom modifier doesn't work. this is a hack to keep going. 
          - name: "Disable prompt requirement"
            ansible.builtin.command: gsettings set org.gnome.Vino prompt-enabled false 
          - name: "Disable encryption"
            ansible.builtin.command: gsettings set org.gnome.Vino require-encryption false
          - name: "Set VNC as auth method"
            ansible.builtin.command: gsettings set org.gnome.Vino authentication-methods "['vnc']"

            # shell to allow for this evaluation 
          - name: "Set password"
            ansible.builtin.shell: gsettings set org.gnome.Vino vnc-password $(echo -n 'thepassword'|base64)  # TODO: actual password? 

      - name: "xorg configuration"
        ansible.builtin.blockinfile:
          path: /etc/X11/xorg.conf
          append_newline: true
          prepend_newline: true
          block: |
            Section "Device"
            Identifier "Dummy0"
            Driver "dummy"
            VideoRam 16384
            EndSection

            Section "Monitor"
            Identifier "Monitor0"
            HorizSync 5.0-1000.0
            VertRefresh 5.0-200.0
            Modeline "1280x800" 24.15 1280 1312 1400 1432 800 819 822 841
            # Modeline "1920x1080_24.00" 173.00 1920 2048 2248 2576 1080 1083 1088 1120
            EndSection

            Section "Screen"
            Identifier "Screen0"
            Monitor "Monitor0"
            Device "Dummy0"
            DefaultDepth 24
            SubSection "Display"
            Depth 24
            Virtual 1280 800
            # Virtual 1920 1080
            EndSubSection
            EndSection
  - name: Setup ROS
    block: 
      - name: Ensure universe is present
        ansible.builtin.lineinfile:
          path: /etc/apt/sources.list
          line: "deb http://ports.ubuntu.com/ubuntu-ports/ {{ ansible_distribution_release }} main restricted universe"
          regexp: "{{ ansible_distribution_release }} (main|restricted|universe) (main|restricted|universe) (main|restricted|universe)"
      - name: Ensure universe updates is present
        ansible.builtin.lineinfile:
          path: /etc/apt/sources.list
          line: "deb http://ports.ubuntu.com/ubuntu-ports/ {{ ansible_distribution_release }}-updates main restricted universe"
          regexp: "{{ ansible_distribution_release }}-updates (main|restricted|universe) (main|restricted|universe) (main|restricted|universe)" 
      - name: Add ROS 2 apt
        block:
          - name: Add apt key 
            ansible.builtin.get_url:
              url: https://raw.githubusercontent.com/ros/rosdistro/master/ros.key
              dest: /usr/share/keyrings/ros-archive-keyring.gpg

          - name: Add ROS Repository
            ansible.builtin.apt_repository:
              repo: "deb [arch=arm64 signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu {{ ansible_distribution_release }} main"
              state: present
          - name: Download ROS
            ansible.builtin.apt:
              name: 
                - ros-humble-ros-base
                - ros-dev-tools
                - ros-humble-mavros
                - ros-humble-mavros-extras
              update_cache: true
              state: latest

          - name: Set bashrc
            become: false
            ansible.builtin.blockinfile: 
              path: /home/lis/.bashrc
              block: |
                source /opt/ros/humble/setup.bash
                export ROS_DOMAIN_ID={{ ros_domain_id }} 

          - name: Get geoids
            ansible.builtin.shell: geographiclib-get-geoids all

          - name: Patch pluginlists
            ansible.builtin.template:
              src: templates/px4_pluginlists.yaml
              dest: /opt/ros/humble/share/mavros/launch/px4_pluginlists.yaml 

          - name: Patch px4_rate
            ansible.builtin.template:
              src: templates/px4_config.j2 
              dest: /opt/ros/humble/share/mavros/launch/px4_config.yaml 
             
  - name: NXT compatability
    block: 
      - name: Allow rootless access to flight controller
        ansible.builtin.user:
          name: "lis"
          groups: dialout
          append: true
      - name: Remove modemmanager
        ansible.builtin.apt:
          name: modemmanager
          state: absent
      - name: Install mavtools
        ansible.builtin.pip:
          name: 
            - mavsdk
            - mavproxy

  - name: Chrony Configuration 
    block:
      - name: Install Chrony
        ansible.builtin.apt: 
          name: chrony

  - name: Set hostname
    block:
    - name: "Set hostname in system"
      ansible.builtin.hostname: 
          name: "{{ hostname }}"
    - name: Modify /etc/hosts
      ansible.builtin.replace:
        path: /etc/hosts
        regexp: '(127\.0\.1\.1\s+).+'
        replace: \1{{ hostname }}

  - name: Set WiFi
    community.general.nmcli: 
      type: wifi
      conn_name: default_drones
      ifname: "{{ drone_wifi_interface }}"
      ssid: "{{ wifi_ssid }}"
      wifi_sec: 
        key-mgmt: wpa-psk
        psk: "{{ wifi_password }}"
      autoconnect: true
      state: present
