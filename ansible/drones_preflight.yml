---

- name: Preflight Local Actions
  connection: local
  hosts: localhost
  tasks:
    - name: Local Mocap
      when: "position_estimation == 'optitrack'"
      delegate_to: 127.0.0.1
      connection: local
      block:
      - name: Modify wrapper config file
        ansible.builtin.lineinfile: 
          path: "{{ host_ros_path }}/src/optitrack_wrapper_ros2/config/optitrack_wrapper_config.yaml"
          regexp: "^(\\s+)server_address:\\s?.*"
          backrefs: true
          line: "\\1server_address: \"{{ optitrack_server_ip }}\""
      - name: Modify multiplexer config file
        ansible.builtin.lineinfile: 
          path: "{{ host_ros_path }}/src/optitrack_multiplexer_ros2/config/optitrack_multiplexer_config.yaml"
          regexp: "^(\\s+)rigid_body_names:\\s?.*"
          backrefs: true
          line: "\\1rigid_body_names: \"{{ groups['drones'] |  map('regex_replace', '\\.local$', '') | join(',') }}\""
      
        # modify the local config variables for the stuff to export


- name: Preflight
  hosts: drones
  remote_user: lis
  become: yes # runs everything with sudo 
  vars: 
    gcs_url: "{{ host_hostname }}.local" 

  tasks:
    - name: Remove all sources
      ansible.builtin.replace: 
        path: /etc/chrony/chrony.conf
        regexp: "^((pool)|(sourcedir))" 
        replace: "# \\1"
    
    - name: OmniNXT Nodes
      block: 
        - name: Get repository 
          ansible.builtin.git: 
            repo: git@github.com:lis-epfl/omni-nxt
            dest: "{{ drone_base_path }}/repos/omni-nxt"
            version: latency_checker # TODO: temp
            key_file: /home/lis/.ssh/id_ed25519
            accept_newhostkey: yes
        - name: Link to ros_ws
          ansible.builtin.file: 
            src: "{{ drone_base_path }}/repos/omni-nxt/ros_packages/latency_checker_ros2"
            dest: "{{ drone_ros_path }}/src/latency_checker_ros2"
            state: link
        
    - name: Add host IPs
      ansible.builtin.blockinfile:
       path: /etc/chrony/chrony.conf
       block: | # change the possible ips and chrony min/max poll in ansible/group_vars/all
           server {{ gcs_url }}  iburst minpoll {{ chrony_minpoll }} maxpoll {{ chrony_maxpoll }}
    - name: Restart chronyd
      ansible.builtin.systemd:
        name: chronyd
        state: restarted

    - name: Set correct pose topic for mocap_to_vision_pose # TODO: Perhaps patch mocap_to_vision_pose_ros2
      ansible.builtin.replace: 
        path: "{{ drone_ros_path }}/src/mocap_to_vision_pose_ros2/config/config.yaml"
        regexp: "/optitrack_multiplexer_node/rigid_body/[A-Za-z_0-9]+"
        replace: "/optitrack_multiplexer_node/rigid_body/{{ ansible_facts['nodename'] }}" # this will be dynamic so can drop
    
    - name: Build ros packages
      become: false
      ansible.builtin.shell: . /opt/ros/humble/setup.sh && colcon build --symlink-install 
      args:
        chdir: "{{ drone_ros_path }}"
    
    - name: Create config directory
      ansible.builtin.file:
        dest: "{{ drone_ros_path }}/config"
        state: directory
        mode: "755"
    
    - name: Send peer list
      ansible.builtin.template: 
        src: templates/peer_list.yaml.j2
        dest: "{{ drone_ros_path }}/config/peer_list.yaml"
        mode: "644"
      vars:
        peers: "{{ groups['drones'] | map('regex_replace', '\\.local$', '') | join('\n') }}"

    - name: Send launch file
      ansible.builtin.template:
        src: templates/drone_launch.yaml.j2
        dest: "{{ drone_base_path }}/launch.yaml"

    - name: Create ros_packages script # TODO: change this system to use a ROS launchfile instead.
      become: false
      ansible.builtin.template: 
        src: scripts/ros_packages_start.sh
        dest: "{{ drone_base_path }}/ros_packages_start.sh"
        mode: "755"
    
    - name: Install ros_packages service 
      ansible.builtin.template: 
        src: templates/ros_packages_service.j2
        dest: /etc/systemd/system/ros_packages.service

    - name: Start ros_packages service
      ansible.builtin.systemd: 
        name: ros_packages
        state: restarted
        enabled: false
        daemon_reload: true
    
    - name: "Mocap Checks"
      when: "position_estimation == 'optitrack'" # TODO: now this is a bit strange...
      block:
      - name: Wait for one minute before checking... # this can be better if we can check ros
        ansible.builtin.pause:
          seconds: 60
      
      - name: "Collect systemd stats"
        ansible.builtin.service_facts:
      - name: ROS Packages Check # TODO: the new system does not fail the system if one of the nodes fail. might need python based one.
        when: "position_estimation == 'optitrack'"
        ansible.builtin.assert: 
          that: "services['ros_packages.service']['state'] == 'running' and services['ros_packages.service']['status'] != 'failed'"
          fail_msg: "ROS Packages are not running properly!"
    
    - name: Chrony Tracking Check
      block: 
        - name: Copy script
          ansible.builtin.copy: 
            src: scripts/chronyc_check.py
            dest: /tmp/chronyc_check.py
            mode: '0755'
          
        - name: Check if we're tracking
          ansible.builtin.shell: /tmp/chronyc_check.py
          register: chronyc_check
          changed_when: false

- name: Local Actions
  connection: local
  hosts: localhost
  tasks:
    - name: Local Mocap
      when: "position_estimation == 'optitrack'"
      delegate_to: 127.0.0.1
      connection: local
      block:
      - name: Create local launch file
        ansible.builtin.template: 
          src: templates/host_launch.yaml
          dest: "{{ host_base_path }}/launch.yaml"
      
      
        # modify the local config variables for the stuff to export




      

