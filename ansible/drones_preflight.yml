---

- name: Local Actions
  connection: local
  hosts: localhost
  tasks:
    - name: Local ROS Packages
      when: "position_estimation == 'optitrack'"
      delegate_to: 127.0.0.1
      connection: local
      block:
      - name: Build local packages
        ansible.builtin.shell: ". /opt/ros/humble/setup.sh && colcon build --symlink-install"
        args:
          chdir: "{{ host_ros_path }}"

      - name: Create local launch file
        ansible.builtin.template: 
          src: templates/host_launch.py.j2
          dest: "{{ host_base_path }}/launch.py"
      - name: Create ros_packages script 
        become: false
        vars: 
          ros_path: "{{ host_ros_path }}"
          base_path: "{{ host_base_path }}"
        ansible.builtin.template: 
          src: scripts/ros_packages_start.sh
          dest: "{{ host_base_path }}/ros_packages_start.sh"
          mode: "755"
     
      - name: Create config directory
        ansible.builtin.file:
          dest: "{{ host_ros_path }}/config"
          state: directory
          mode: "755"
    
      - name: Copy peer list
        ansible.builtin.template: 
          src: templates/peer_list.yaml.j2
          dest: "{{ host_ros_path }}/config/peer_list.yaml"
          mode: "644"
        vars:
          peers: "{{ groups['drones'] | map('regex_replace', '\\.local$', '') | join('\n') }}"
      
      - name: Send bridge configuration 
        ansible.builtin.template: 
          src: templates/host_bridge_config.yaml.j2
          dest: "{{ host_ros_path }}/config/bridge_config.yaml"
          mode: "644"

      - name: Create local systemd folder
        ansible.builtin.file:
          dest: "~/.local/share/systemd/user"
          state: directory
          
      - name: Copy ros_packages service 
        vars:
          base_path: "{{ host_base_path }}"
        ansible.builtin.template: 
          src: templates/ros_packages_service.j2
          dest: ~/.local/share/systemd/user/ros_packages.service
      - name: Start ros_packages service
        ansible.builtin.systemd:
          name: "ros_packages"
          state: restarted
          enabled: false
          scope: user
          daemon_reload: true

- name: Preflight
  hosts: drones
  remote_user: lis
  vars: 
    gcs_url: "{{ host_hostname }}.local" 

  tasks:
    - name: Chrony Stuff
      become: yes
      block:
      - name: Remove all sources
        become: yes
        ansible.builtin.replace: 
          path: /etc/chrony/chrony.conf
          regexp: "^((pool)|(sourcedir))" 
          replace: "# \\1"
        
      - name: Add host IPs
        ansible.builtin.blockinfile:
          path: /etc/chrony/chrony.conf
          block: | # change the possible ips and chrony min/max poll in ansible/group_vars/all
              server {{ gcs_url }}  iburst minpoll {{ chrony_minpoll }} maxpoll {{ chrony_maxpoll }}
      - name: Restart chronyd
        ansible.builtin.systemd:
          name: chronyd
          state: restarted

    - name: Create config directory
      ansible.builtin.file:
        dest: "{{ drone_ros_path }}/config"
        state: directory
        mode: "755"
    
    - name: Send peer list
      ansible.builtin.template: 
        src: templates/peer_list.yaml.j2
        dest: "{{ drone_ros_path }}/config/peer_list.yaml"
        mode: "644"
      vars:
        peers: "{{ groups['drones'] | map('regex_replace', '\\.local$', '') | join('\n') }}"
    
    - name: Send bridge configuration 
      ansible.builtin.template: 
        src: templates/drone_bridge_config.yaml.j2
        dest: "{{ drone_ros_path }}/config/bridge_config.yaml"
        mode: "644"

    - name: Send launch file
      ansible.builtin.template:
        src: templates/drone_launch.py.j2
        dest: "{{ drone_base_path }}/launch.py"

    - name: Send 3D Bounds file
      ansible.builtin.copy:
        src: templates/bounds.json
        dest: "{{ drone_ros_path }}/config/bounds.json"
      

    - name: Create ros_packages script 
      vars: 
        ros_path: "{{ drone_ros_path }}"
        base_path: "{{ drone_base_path }}"
      ansible.builtin.template: 
        src: scripts/ros_packages_start.sh
        dest: "{{ drone_base_path }}/ros_packages_start.sh"
        mode: "755"
      
    - name: Create local services dir
      ansible.builtin.file: 
        dest: ~/.local/share/systemd/user
        state: directory
    
    - name: Install ros_packages service 
      vars:
        base_path: "{{ drone_base_path }}"
      ansible.builtin.template: 
        src: templates/ros_packages_service.j2
        dest: ~/.local/share/systemd/user/ros_packages.service

    - name: Start ros_packages service
      ansible.builtin.systemd: 
        name: ros_packages
        state: restarted
        enabled: false
        daemon_reload: true
        scope: user
    
    - name: Pre-flight Validation Checks
      block:
        - name: Check if ROS2 workspace install directory exists
          ansible.builtin.stat:
            path: "{{ drone_ros_path }}/install"
          register: ros_install_check
          
        - name: Fail if ROS2 workspace install directory does not exist
          ansible.builtin.fail:
            msg: "ROS2 workspace install directory {{ drone_ros_path }}/install does not exist on {{ ansible_hostname }}. Please ensure the workspace is properly built."
          when: not ros_install_check.stat.exists
          
        - name: Get local repository git commit hash
          ansible.builtin.shell: git rev-parse HEAD
          args:
            chdir: "{{ playbook_dir }}/.."
          delegate_to: localhost
          register: local_git_hash
          run_once: true
          changed_when: false
          
        - name: Check if swarm-nxt repository exists on drone
          ansible.builtin.stat:
            path: "~/repos/swarm-nxt"
          register: drone_repo_check
          
        - name: Fail if swarm-nxt repository does not exist on drone
          ansible.builtin.fail:
            msg: "Repository ~/repos/swarm-nxt does not exist on {{ ansible_hostname }}. Please ensure the repository is cloned."
          when: not drone_repo_check.stat.exists
          
        - name: Get drone repository git commit hash
          ansible.builtin.shell: git rev-parse HEAD
          args:
            chdir: "~/repos/swarm-nxt"
          register: drone_git_hash
          changed_when: false
          when: drone_repo_check.stat.exists
          
        - name: Fail if git versions do not match
          ansible.builtin.fail:
            msg: "Git version mismatch on {{ ansible_hostname }}. Local: {{ local_git_hash.stdout }}, Drone: {{ drone_git_hash.stdout }}. Please ensure both repositories are synchronized."
          when: drone_repo_check.stat.exists and local_git_hash.stdout != drone_git_hash.stdout

    - name: Chrony Tracking Check
      block: 
        - name: Copy script
          ansible.builtin.copy: 
            src: scripts/chronyc_check.py
            dest: /tmp/chronyc_check.py
            mode: '0755'
          
        - name: Check if we're tracking
          ansible.builtin.shell: /tmp/chronyc_check.py
          register: chronyc_check
          changed_when: false


# TODO: Add something about waiting and checking all the packages after :)

