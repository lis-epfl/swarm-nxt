# swarm_stack.launch.py
from launch import LaunchDescription
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import AnyLaunchDescriptionSource
from launch.substitutions import PathJoinSubstitution
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare


def generate_launch_description():
    mavros_include = IncludeLaunchDescription(
        AnyLaunchDescriptionSource(
            PathJoinSubstitution([
                FindPackageShare('mavros'),
                'launch',
                'px4.launch'  # works with xml or .py via AnyLaunchDescriptionSource
            ])
        ),
        launch_arguments={
            # keep Ansible templating
            'gcs_url': 'udp://@{{ gcs_url }}:14550',
            'fcu_url': '{{ drone_fcu_url }}',
            'namespace': '{{ ns }}/mavros',
            'tgt_system': '{{ ns | regex_search("[0-9]+$") }}',
        }.items(),
    )

    latency_checker = Node(
        package='latency_checker_ros2',
        executable='latency_checker_node',
        namespace='{{ ns }}',
        parameters=[{
            'peer_file_path': '{{ drone_ros_path }}/config/peer_list.yaml',
        }],
        output='screen',
    )

    bounds_checker = Node(
        package='bounds_checker_ros2',
        executable='bounds_checker_node',
        namespace='{{ ns }}',
        parameters=[{
            'plane_file': '{{ drone_ros_path }}/config/bounds.json',
        }],
        output='screen',
    )

    drone_planner = Node(
        package='drone_planner_ros2',
        executable='drone_planner_node',
        namespace='{{ ns }}',
        output='screen',
    )

    controller = Node(
        package='swarmnxt_controller_ros2',
        executable='swarmnxt_controller_node',
        namespace='{{ ns }}',
        output='screen',
    )

    return LaunchDescription([
        mavros_include,
        latency_checker,
        bounds_checker,
        drone_planner,
        controller,
    ])
